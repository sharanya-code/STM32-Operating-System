
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e64  08003e64  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003e6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  2000006c  08003ed8  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  20000c64  08003ed8  00005c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f1f  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f54  00000000  00000000  0000dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000647  00000000  00000000  00010780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163c5  00000000  00000000  00010dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af34  00000000  00000000  0002718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008796a  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000b9a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bc264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c18 	.word	0x08003c18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003c18 	.word	0x08003c18

080001e0 <os_kernel_start>:
.thumb

.global os_kernel_start
.thumb_func
os_kernel_start:
	MRS R0, PSP
 80001e0:	f3ef 8009 	mrs	r0, PSP
    LDMIA R0!, {R4 - R11}
 80001e4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0
    LDR LR, =0xFFFFFFFD
 80001ec:	f06f 0e02 	mvn.w	lr, #2
    BX LR
 80001f0:	4770      	bx	lr

080001f2 <PendSV_Handler>:


.global PendSV_Handler
.thumb_func
PendSV_Handler:
	MRS R0, PSP
 80001f2:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!, {R4-R11}
 80001f6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 80001fa:	f380 8809 	msr	PSP, r0

	BL new_task
 80001fe:	f000 fd67 	bl	8000cd0 <new_task>

	MRS R0, PSP
 8000202:	f3ef 8009 	mrs	r0, PSP
	LDMIA R0!, {R4-R11}
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 800020a:	f380 8809 	msr	PSP, r0
	LDR LR, =0xFFFFFFFD
 800020e:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <integer_log2>:
	return (1 << index) + 1;
}

// The math.h library doesn't seem to work so I'm just going to implement my own log2 function
unsigned int integer_log2(unsigned int num)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if (num == 0)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <integer_log2+0x12>
		return 0; // Handle the edge case for 0
 80005be:	2300      	movs	r3, #0
 80005c0:	e004      	b.n	80005cc <integer_log2+0x1c>
	return 31 - __builtin_clz(num);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	fab3 f383 	clz	r3, r3
 80005c8:	f1c3 031f 	rsb	r3, r3, #31
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <index_to_level>:

static inline U8 index_to_level(const U16 index)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	return (U8)(integer_log2(index + 1));
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffe2 	bl	80005b0 <integer_log2>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b2db      	uxtb	r3, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <index_to_level_and_pos>:
	U8 level = index_to_level(index);
	return (U16)(index - (1 << level) + 1);
}

void index_to_level_and_pos(const U16 index, U8 *level, U16 *level_pos)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	81fb      	strh	r3, [r7, #14]
	*level = index_to_level(index);
 8000606:	89fb      	ldrh	r3, [r7, #14]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffe5 	bl	80005d8 <index_to_level>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	701a      	strb	r2, [r3, #0]
	*level_pos = (U16)(index - (1 << *level) + 1);
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	2301      	movs	r3, #1
 800061e:	4093      	lsls	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	89fa      	ldrh	r2, [r7, #14]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3301      	adds	r3, #1
 800062a:	b29a      	uxth	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	801a      	strh	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <index_to_addr>:

	return bitarray_index;
}

static U32 index_to_addr(const U16 index)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	U8 level;
	U16 level_pos;

	index_to_level_and_pos(index, &level, &level_pos);
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	f107 010f 	add.w	r1, r7, #15
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffd3 	bl	80005f8 <index_to_level_and_pos>

	return heap_start + (U32)(1 << (MAX_SIZE_POWER - level)) * level_pos;
 8000652:	89bb      	ldrh	r3, [r7, #12]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <index_to_addr+0x38>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	1acb      	subs	r3, r1, r3
 8000660:	409a      	lsls	r2, r3
 8000662:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <index_to_addr+0x3c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	200008b8 	.word	0x200008b8

08000678 <super_fast_index_to_addr>:

void super_fast_index_to_addr(const U16 index, U32 **addr, U32 **buddy_addr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	81fb      	strh	r3, [r7, #14]
	U32 level = integer_log2(index + 1);
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	3301      	adds	r3, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff90 	bl	80005b0 <integer_log2>
 8000690:	61f8      	str	r0, [r7, #28]
	U32 level_pos = (index - (1 << level) + 1);
 8000692:	89fa      	ldrh	r2, [r7, #14]
 8000694:	2101      	movs	r1, #1
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]

	U32 level_offset = 1 << (MAX_SIZE_POWER - level);
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <super_fast_index_to_addr+0x70>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	2201      	movs	r2, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
	*addr = heap_start + level_offset * level_pos;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	69ba      	ldr	r2, [r7, #24]
 80006b8:	fb03 f202 	mul.w	r2, r3, r2
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <super_fast_index_to_addr+0x74>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	461a      	mov	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	601a      	str	r2, [r3, #0]
	*buddy_addr = heap_start + level_offset * (level_pos + 1);
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	3301      	adds	r3, #1
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	fb03 f202 	mul.w	r2, r3, r2
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <super_fast_index_to_addr+0x74>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	200008b8 	.word	0x200008b8

080006f0 <split_node>:

void split_node(metadata *parent, int lvl)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	int next_lvl = lvl + 1;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
	int parent_index = (1 << lvl) + parent->level_pos - 1;
 8000700:	2201      	movs	r2, #1
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8912      	ldrh	r2, [r2, #8]
 800070c:	4413      	add	r3, r2
 800070e:	3b01      	subs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
	int parent_pos = parent->level_pos;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	891b      	ldrh	r3, [r3, #8]
 8000716:	617b      	str	r3, [r7, #20]
	int bitindex = (parent_index << 1) + 1;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]

	bitarray[parent_index] = 1;
 8000720:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <split_node+0xac>)
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	4413      	add	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
	bitarray[bitindex] = 1;
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <split_node+0xac>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4413      	add	r3, r2
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]

	free_list[lvl] = free_list[lvl]->next;
 8000734:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <split_node+0xb0>)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <split_node+0xb0>)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// free_list[lvl] = free_list[lvl]->next; // we remove the shit in the loop then, also calculate pos and bitarray position here for comfort
	metadata *cur;
	metadata *next;
	// uint32_t start = TIMER_THING;
	super_fast_index_to_addr(bitindex, &cur, &next);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f107 0208 	add.w	r2, r7, #8
 800074e:	f107 010c 	add.w	r1, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff90 	bl	8000678 <super_fast_index_to_addr>
	// Calculate the children nodes off parent
	cur->level_pos = parent_pos << 1;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	b29a      	uxth	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	b292      	uxth	r2, r2
 8000762:	811a      	strh	r2, [r3, #8]
	next->level_pos = cur->level_pos + 1;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	891a      	ldrh	r2, [r3, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	3201      	adds	r2, #1
 800076c:	b292      	uxth	r2, r2
 800076e:	811a      	strh	r2, [r3, #8]
	next->next = NULL;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	cur->prev = NULL;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	// set the nodes to created
	next->prev = cur;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	611a      	str	r2, [r3, #16]
	cur->next = next;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	60da      	str	r2, [r3, #12]

	free_list[next_lvl] = cur;
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <split_node+0xb0>)
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <k_mem_init>:
/************************************************
 *               FUNCTIONS
 ************************************************/

int k_mem_init()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	heap_start = &_img_end;
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <k_mem_init+0x74>)
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <k_mem_init+0x78>)
 80007ae:	601a      	str	r2, [r3, #0]

	if (init_called == 1 || kernel_config.is_running == FALSE)
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <k_mem_init+0x7c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d004      	beq.n	80007c2 <k_mem_init+0x1e>
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <k_mem_init+0x80>)
 80007ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d102      	bne.n	80007c8 <k_mem_init+0x24>
	{
		return RTX_ERR;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e022      	b.n	800080e <k_mem_init+0x6a>
	}
	init_called = 1;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <k_mem_init+0x7c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
	metadata *head = index_to_addr(0);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff32 	bl	8000638 <index_to_addr>
 80007d4:	4603      	mov	r3, r0
 80007d6:	603b      	str	r3, [r7, #0]

	head->next = NULL;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
	head->prev = NULL;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
	head->level_pos = 0;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	811a      	strh	r2, [r3, #8]

	free_list[0] = head;
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <k_mem_init+0x84>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	6013      	str	r3, [r2, #0]

	for (int i = 1; i < 11; i++)
 80007f0:	2301      	movs	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	e007      	b.n	8000806 <k_mem_init+0x62>
	{
		free_list[i] = NULL;
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <k_mem_init+0x84>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2100      	movs	r1, #0
 80007fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i < 11; i++)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0a      	cmp	r3, #10
 800080a:	ddf4      	ble.n	80007f6 <k_mem_init+0x52>
	}
	return RTX_OK;
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20004e68 	.word	0x20004e68
 800081c:	200008b8 	.word	0x200008b8
 8000820:	20000088 	.word	0x20000088
 8000824:	200008bc 	.word	0x200008bc
 8000828:	2000008c 	.word	0x2000008c

0800082c <k_mem_alloc>:

void *k_mem_alloc(size_t size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (init_called == 0 || size == 0) // Check to make sure init called and size are greater than 0
 8000834:	4b45      	ldr	r3, [pc, #276]	@ (800094c <k_mem_alloc+0x120>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <k_mem_alloc+0x16>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <k_mem_alloc+0x1a>
	{
		return NULL;
 8000842:	2300      	movs	r3, #0
 8000844:	e07d      	b.n	8000942 <k_mem_alloc+0x116>
	}

	int k = MAX_SIZE_POWER;
 8000846:	4b42      	ldr	r3, [pc, #264]	@ (8000950 <k_mem_alloc+0x124>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	61fb      	str	r3, [r7, #28]
	int size_of_block = 1 << k;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	61bb      	str	r3, [r7, #24]
	size += sizeof(metadata);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3314      	adds	r3, #20
 800085a:	607b      	str	r3, [r7, #4]

	while (size < size_of_block) // Find the upperbound of a block that fits our size includied with metadata
 800085c:	e007      	b.n	800086e <k_mem_alloc+0x42>
	{
		k = k - 1;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b01      	subs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
		size_of_block = 1 << k;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	61bb      	str	r3, [r7, #24]
	while (size < size_of_block) // Find the upperbound of a block that fits our size includied with metadata
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	d3f3      	bcc.n	800085e <k_mem_alloc+0x32>
	}

	k = MAX_SIZE_POWER - k;
 8000876:	4b36      	ldr	r3, [pc, #216]	@ (8000950 <k_mem_alloc+0x124>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	61fb      	str	r3, [r7, #28]
	k--;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b01      	subs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
	if (k < 0)
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	da01      	bge.n	8000892 <k_mem_alloc+0x66>
	{
		k = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
	}
	if (free_list[k] != NULL) // If node exists then put memory into here then go to next node
 8000892:	4a30      	ldr	r2, [pc, #192]	@ (8000954 <k_mem_alloc+0x128>)
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d011      	beq.n	80008c2 <k_mem_alloc+0x96>
	{
		int pos = (1 << k) + (free_list[k]->level_pos) - 1;
 800089e:	2201      	movs	r2, #1
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	492b      	ldr	r1, [pc, #172]	@ (8000954 <k_mem_alloc+0x128>)
 80008a8:	69fa      	ldr	r2, [r7, #28]
 80008aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ae:	8912      	ldrh	r2, [r2, #8]
 80008b0:	4413      	add	r3, r2
 80008b2:	3b01      	subs	r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
		bitarray[pos] = 1;
 80008b6:	4a28      	ldr	r2, [pc, #160]	@ (8000958 <k_mem_alloc+0x12c>)
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4413      	add	r3, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	e022      	b.n	8000908 <k_mem_alloc+0xdc>
		//	free_list[k] = free_list[k]->next;
	}
	else
	{
		// Now we have k
		int node_not_null = k;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	617b      	str	r3, [r7, #20]
		while (node_not_null >= 0 && free_list[node_not_null] == NULL) // Find the peak node where space exists
 80008c6:	e002      	b.n	80008ce <k_mem_alloc+0xa2>
		{
			node_not_null = node_not_null - 1;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
		while (node_not_null >= 0 && free_list[node_not_null] == NULL) // Find the peak node where space exists
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db05      	blt.n	80008e0 <k_mem_alloc+0xb4>
 80008d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <k_mem_alloc+0x128>)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f3      	beq.n	80008c8 <k_mem_alloc+0x9c>
		}
		if (node_not_null < 0)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da0c      	bge.n	8000900 <k_mem_alloc+0xd4>
		{
			// No available block large enough

			return NULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e02b      	b.n	8000942 <k_mem_alloc+0x116>
		}

		for (node_not_null; node_not_null < k; node_not_null++)
		{
			split_node(free_list[node_not_null], node_not_null);
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <k_mem_alloc+0x128>)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	6979      	ldr	r1, [r7, #20]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fefb 	bl	80006f0 <split_node>
		for (node_not_null; node_not_null < k; node_not_null++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <k_mem_alloc+0xbe>
		}
	}

	// uint32_t *base_address = index_to_addr((1 << 15 - k) * free_list[k]->level_pos);
	// U8 *base_address = (U8 *)index_to_addr((1 << k) + (free_list[k]->level_pos) - 1); // has to be U8 for pointer arithmetic
	U8 *base_address = (U8 *)free_list[k];
 8000908:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <k_mem_alloc+0x128>)
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	60fb      	str	r3, [r7, #12]

	free_list[k] = free_list[k]->next; // Update the free list to point to the next free block
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <k_mem_alloc+0x128>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	490d      	ldr	r1, [pc, #52]	@ (8000954 <k_mem_alloc+0x128>)
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	metadata *meta = (metadata *)base_address;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	60bb      	str	r3, [r7, #8]
	meta->task_tid = osGetTID();
 8000928:	f000 f97c 	bl	8000c24 <osGetTID>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	605a      	str	r2, [r3, #4]
	meta->secret_key = 0b10011001;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	2299      	movs	r2, #153	@ 0x99
 8000936:	701a      	strb	r2, [r3, #0]
	meta->is_allocated = 1;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2201      	movs	r2, #1
 800093c:	705a      	strb	r2, [r3, #1]
	// total_alloc= total_alloc +size_of_block;
	return base_address + sizeof(metadata);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3314      	adds	r3, #20
}
 8000942:	4618      	mov	r0, r3
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000088 	.word	0x20000088
 8000950:	20000000 	.word	0x20000000
 8000954:	2000008c 	.word	0x2000008c
 8000958:	200000b8 	.word	0x200000b8

0800095c <scheduler>:
/************************************************
 *             HELPER FUNCTIONS
 ************************************************/

static task_t scheduler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
	task_t next_task = TID_DORMANT;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	617b      	str	r3, [r7, #20]
	int earliest_deadline = INT_MAX;
 8000968:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800096c:	613b      	str	r3, [r7, #16]
	int all_sleeping = TRUE;
 800096e:	2301      	movs	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
	int all_dormant = TRUE;
 8000972:	2301      	movs	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]


	//Find earliest deadline among ready tasks
    for (int i = 1; i < MAX_TASKS; i++)
 8000976:	2301      	movs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e033      	b.n	80009e4 <scheduler+0x88>
    {
        if (kernel_config.TCBS[i].state != DORMANT)
 800097c:	4a22      	ldr	r2, [pc, #136]	@ (8000a08 <scheduler+0xac>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	015b      	lsls	r3, r3, #5
 8000982:	4413      	add	r3, r2
 8000984:	3308      	adds	r3, #8
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d028      	beq.n	80009de <scheduler+0x82>
        {
            all_dormant = FALSE;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]

            if (kernel_config.TCBS[i].state == READY)
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <scheduler+0xac>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	015b      	lsls	r3, r3, #5
 8000996:	4413      	add	r3, r2
 8000998:	3308      	adds	r3, #8
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d114      	bne.n	80009ca <scheduler+0x6e>
            {
                all_sleeping = FALSE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
                if (kernel_config.TCBS[i].remaining_time < earliest_deadline)
 80009a4:	4a18      	ldr	r2, [pc, #96]	@ (8000a08 <scheduler+0xac>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	015b      	lsls	r3, r3, #5
 80009aa:	4413      	add	r3, r2
 80009ac:	331c      	adds	r3, #28
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d213      	bcs.n	80009de <scheduler+0x82>
                {
                    earliest_deadline = kernel_config.TCBS[i].remaining_time;
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <scheduler+0xac>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	4413      	add	r3, r2
 80009be:	331c      	adds	r3, #28
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	613b      	str	r3, [r7, #16]
                    next_task = i;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e009      	b.n	80009de <scheduler+0x82>
                }
            } else if (kernel_config.TCBS[i].state == RUNNING)
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <scheduler+0xac>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	015b      	lsls	r3, r3, #5
 80009d0:	4413      	add	r3, r2
 80009d2:	3308      	adds	r3, #8
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d101      	bne.n	80009de <scheduler+0x82>
            {
                all_sleeping = FALSE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < MAX_TASKS; i++)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	ddc8      	ble.n	800097c <scheduler+0x20>
            }
        }
    }

    //If all tasks are dormant/ sleeping (can remove just here if we need to handle specifically)
    if (all_dormant || all_sleeping)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <scheduler+0x9a>
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <scheduler+0x9e>
    {
    	return 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <scheduler+0xa0>
    }

    return next_task;
 80009fa:	697b      	ldr	r3, [r7, #20]
        }
    }
    return next_task;
    */

}
 80009fc:	4618      	mov	r0, r3
 80009fe:	371c      	adds	r7, #28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	200008bc 	.word	0x200008bc

08000a0c <SVC_Handler_Main>:

void SVC_Handler_Main(unsigned int *svc_args) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	unsigned int svc_number;

    // Stack frame contains: R0, R1, R2, R3, R12, LR, PC, xPSR
    // SVC number is the immediate value passed in the SVC instruction
    // It can be found at the address of the PC (Program Counter) - 2
    svc_number = ((char *)svc_args[6])[-2];
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3318      	adds	r3, #24
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	617b      	str	r3, [r7, #20]

    // Handle the system call based on the svc_number
    // For demonstration, we'll just print the SVC number
    printf("System Call Number: %u\n", svc_number);
 8000a20:	6979      	ldr	r1, [r7, #20]
 8000a22:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <SVC_Handler_Main+0x50>)
 8000a24:	f002 fada 	bl	8002fdc <iprintf>

    switch (svc_number){
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <SVC_Handler_Main+0x2a>
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d00c      	beq.n	8000a4e <SVC_Handler_Main+0x42>
			break;
		case 1:
			os_kernel_start();
			break;
    }
    return;
 8000a34:	e00f      	b.n	8000a56 <SVC_Handler_Main+0x4a>
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000a36:	f3ef 8314 	mrs	r3, CONTROL
 8000a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
			__set_CONTROL(__get_CONTROL()& ~CONTROL_nPRIV_Msk);
 8000a3e:	f023 0301 	bic.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	f383 8814 	msr	CONTROL, r3
}
 8000a4a:	bf00      	nop
			break;
 8000a4c:	e002      	b.n	8000a54 <SVC_Handler_Main+0x48>
			os_kernel_start();
 8000a4e:	f7ff fbc7 	bl	80001e0 <os_kernel_start>
			break;
 8000a52:	bf00      	nop
    return;
 8000a54:	bf00      	nop

}
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	08003c30 	.word	0x08003c30

08000a60 <ContextSwitch>:

void ContextSwitch(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	if(kernel_config.is_running == FALSE || kernel_config.running_task == TID_DORMANT){
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <ContextSwitch+0x38>)
 8000a66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00e      	beq.n	8000a8c <ContextSwitch+0x2c>
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <ContextSwitch+0x38>)
 8000a70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d008      	beq.n	8000a8c <ContextSwitch+0x2c>
		return;
	}

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <ContextSwitch+0x3c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <ContextSwitch+0x3c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6053      	str	r3, [r2, #4]
	__asm("isb");
 8000a86:	f3bf 8f6f 	isb	sy

	return;
 8000a8a:	e000      	b.n	8000a8e <ContextSwitch+0x2e>
		return;
 8000a8c:	bf00      	nop
}
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200008bc 	.word	0x200008bc
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <null_task>:

/************************************************
 *             FUNCTIONS
 ************************************************/

void null_task(void *) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    while (1) {
        // Put the CPU in a low-power state or perform background tasks
        __WFI(); // Wait For Interrupt, put CPU in sleep mode
 8000aa8:	bf30      	wfi
 8000aaa:	e7fd      	b.n	8000aa8 <null_task+0x8>

08000aac <osNull_task>:
    }
}
void osNull_task(void){
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
		TCB* create_tcb = &kernel_config.TCBS[0];
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <osNull_task+0x88>)
 8000ab4:	607b      	str	r3, [r7, #4]
		create_tcb->tid = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]

		create_tcb->ptask = &null_task;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b38 <osNull_task+0x8c>)
 8000ac0:	601a      	str	r2, [r3, #0]
		create_tcb->stack_size = STACK_SIZE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac8:	815a      	strh	r2, [r3, #10]

		U32* MSP_INIT_VAL = *(U32**)0x0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	603b      	str	r3, [r7, #0]
		create_tcb->p_stack_mem = (U32)(MSP_INIT_VAL - MAIN_STACK_SIZE);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f5a3 5280 	sub.w	r2, r3, #4096	@ 0x1000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	611a      	str	r2, [r3, #16]
		// Initialize the stack for the task
		create_tcb->SP = (U32)(create_tcb->p_stack_mem);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691a      	ldr	r2, [r3, #16]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60da      	str	r2, [r3, #12]
		U32* stackptr = (U32*)create_tcb->SP;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	60fb      	str	r3, [r7, #12]

		// Set up initial stack frame
		*(--stackptr) = 1 << 24;                    // xPSR, setting Thumb mode
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3b04      	subs	r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000af4:	601a      	str	r2, [r3, #0]
		*(--stackptr) = create_tcb->ptask;      		// PC, function address
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3b04      	subs	r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 14; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	e008      	b.n	8000b1c <osNull_task+0x70>
			*(--stackptr) = 0xA;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3b04      	subs	r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	220a      	movs	r2, #10
 8000b14:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 14; i++) {
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b0d      	cmp	r3, #13
 8000b20:	ddf3      	ble.n	8000b0a <osNull_task+0x5e>
		}

		create_tcb->SP = stackptr;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	60da      	str	r2, [r3, #12]

}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	200008bc 	.word	0x200008bc
 8000b38:	08000aa1 	.word	0x08000aa1

08000b3c <osKernelInit>:

void osKernelInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	SHPR3 |= 0xFFU << 24; //Set the priority of SysTick to be the weakest
 8000b42:	4b35      	ldr	r3, [pc, #212]	@ (8000c18 <osKernelInit+0xdc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a34      	ldr	r2, [pc, #208]	@ (8000c18 <osKernelInit+0xdc>)
 8000b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000b4c:	6013      	str	r3, [r2, #0]
	SHPR3 |= 0xFEU << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 8000b4e:	4b32      	ldr	r3, [pc, #200]	@ (8000c18 <osKernelInit+0xdc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a31      	ldr	r2, [pc, #196]	@ (8000c18 <osKernelInit+0xdc>)
 8000b54:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 8000b58:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; //set the priority of SVC higher than PendSV
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <osKernelInit+0xe0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <osKernelInit+0xe0>)
 8000b60:	f043 437d 	orr.w	r3, r3, #4244635648	@ 0xfd000000
 8000b64:	6013      	str	r3, [r2, #0]
    // Initialize TCBs
    for (U8 i = 0; i < MAX_TASKS; i++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e03f      	b.n	8000bec <osKernelInit+0xb0>
    {
        kernel_config.TCBS[i].tid = TID_DORMANT;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <osKernelInit+0xe4>)
 8000b70:	015b      	lsls	r3, r3, #5
 8000b72:	4413      	add	r3, r2
 8000b74:	3304      	adds	r3, #4
 8000b76:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7a:	601a      	str	r2, [r3, #0]
        kernel_config.TCBS[i].state = TASK_DORMANT;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <osKernelInit+0xe4>)
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	4413      	add	r3, r2
 8000b84:	3308      	adds	r3, #8
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
        kernel_config.TCBS[i].SP = NULL;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a24      	ldr	r2, [pc, #144]	@ (8000c20 <osKernelInit+0xe4>)
 8000b8e:	015b      	lsls	r3, r3, #5
 8000b90:	4413      	add	r3, r2
 8000b92:	330c      	adds	r3, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
        kernel_config.TCBS[i].p_stack_mem = NULL;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <osKernelInit+0xe4>)
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
        kernel_config.TCBS[i].stack_size = 0x4000;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c20 <osKernelInit+0xe4>)
 8000baa:	015b      	lsls	r3, r3, #5
 8000bac:	4413      	add	r3, r2
 8000bae:	330a      	adds	r3, #10
 8000bb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bb4:	801a      	strh	r2, [r3, #0]
        kernel_config.TCBS[i].remaining_sleep_time = DEFAULT_SLEEP_TIME;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <osKernelInit+0xe4>)
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3314      	adds	r3, #20
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	601a      	str	r2, [r3, #0]
        kernel_config.TCBS[i].deadline = DEFAULT_DEADLINE;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <osKernelInit+0xe4>)
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4413      	add	r3, r2
 8000bce:	3318      	adds	r3, #24
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	601a      	str	r2, [r3, #0]
        kernel_config.TCBS[i].remaining_time = DEFAULT_DEADLINE;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <osKernelInit+0xe4>)
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	4413      	add	r3, r2
 8000bde:	331c      	adds	r3, #28
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	601a      	str	r2, [r3, #0]
    for (U8 i = 0; i < MAX_TASKS; i++)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d9bc      	bls.n	8000b6c <osKernelInit+0x30>
    }

    // Init other members
    kernel_config.num_running_tasks = 0;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <osKernelInit+0xe4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    kernel_config.is_running = TRUE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <osKernelInit+0xe4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    kernel_config.running_task = TID_DORMANT;
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <osKernelInit+0xe4>)
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    osNull_task();
 8000c0c:	f7ff ff4e 	bl	8000aac <osNull_task>


}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	e000ed20 	.word	0xe000ed20
 8000c1c:	e000ed1c 	.word	0xe000ed1c
 8000c20:	200008bc 	.word	0x200008bc

08000c24 <osGetTID>:

task_t osGetTID (void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	if(kernel_config.is_running == FALSE || kernel_config.running_task == TID_DORMANT){
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <osGetTID+0x30>)
 8000c2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <osGetTID+0x1a>
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <osGetTID+0x30>)
 8000c34:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d101      	bne.n	8000c42 <osGetTID+0x1e>
		return 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e002      	b.n	8000c48 <osGetTID+0x24>
	}
	return kernel_config.running_task;
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <osGetTID+0x30>)
 8000c44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
};
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200008bc 	.word	0x200008bc

08000c58 <osKernelStart>:


int osKernelStart(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	if ((kernel_config.is_running == 0) || (kernel_config.TCBS[1].state == DORMANT)){
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <osKernelStart+0x74>)
 8000c60:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <osKernelStart+0x1a>
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <osKernelStart+0x74>)
 8000c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <osKernelStart+0x20>
		return RTX_ERR;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e024      	b.n	8000cc2 <osKernelStart+0x6a>
	}else{
		kernel_config.is_running = TRUE;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <osKernelStart+0x74>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		task_t firstTask = scheduler();
 8000c80:	f7ff fe6c 	bl	800095c <scheduler>
 8000c84:	6078      	str	r0, [r7, #4]
		kernel_config.running_task = firstTask;
 8000c86:	4a11      	ldr	r2, [pc, #68]	@ (8000ccc <osKernelStart+0x74>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
		__set_PSP((U32)kernel_config.TCBS[kernel_config.running_task].SP);
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <osKernelStart+0x74>)
 8000c90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <osKernelStart+0x74>)
 8000c96:	015b      	lsls	r3, r3, #5
 8000c98:	4413      	add	r3, r2
 8000c9a:	330c      	adds	r3, #12
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f383 8809 	msr	PSP, r3
}
 8000ca6:	bf00      	nop
		kernel_config.TCBS[kernel_config.running_task].state = RUNNING;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <osKernelStart+0x74>)
 8000caa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <osKernelStart+0x74>)
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	701a      	strb	r2, [r3, #0]
		HAL_Init();
 8000cba:	f000 fccf 	bl	800165c <HAL_Init>
		__asm("SVC #1");
 8000cbe:	df01      	svc	1
	}
	return RTX_OK;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200008bc 	.word	0x200008bc

08000cd0 <new_task>:

	return;
}

void new_task()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000cd6:	f3ef 8309 	mrs	r3, PSP
 8000cda:	60bb      	str	r3, [r7, #8]
  return(result);
 8000cdc:	68ba      	ldr	r2, [r7, #8]
	task_t new_task;

	kernel_config.TCBS[kernel_config.running_task].SP = __get_PSP();
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <new_task+0x80>)
 8000ce0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d50 <new_task+0x80>)
 8000ce8:	015b      	lsls	r3, r3, #5
 8000cea:	4413      	add	r3, r2
 8000cec:	330c      	adds	r3, #12
 8000cee:	6019      	str	r1, [r3, #0]
	if (kernel_config.TCBS[kernel_config.running_task].state == RUNNING){
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <new_task+0x80>)
 8000cf2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cf6:	4a16      	ldr	r2, [pc, #88]	@ (8000d50 <new_task+0x80>)
 8000cf8:	015b      	lsls	r3, r3, #5
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3308      	adds	r3, #8
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d108      	bne.n	8000d16 <new_task+0x46>
		kernel_config.TCBS[kernel_config.running_task].state = READY;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <new_task+0x80>)
 8000d06:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000d0a:	4a11      	ldr	r2, [pc, #68]	@ (8000d50 <new_task+0x80>)
 8000d0c:	015b      	lsls	r3, r3, #5
 8000d0e:	4413      	add	r3, r2
 8000d10:	3308      	adds	r3, #8
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
	}

	// Run scheduler to get new task to run and set to running task
	new_task = scheduler();
 8000d16:	f7ff fe21 	bl	800095c <scheduler>
 8000d1a:	60f8      	str	r0, [r7, #12]

	kernel_config.running_task = new_task;
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <new_task+0x80>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

	// set state of new task to running
	kernel_config.TCBS[new_task].state = RUNNING;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <new_task+0x80>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	2202      	movs	r2, #2
 8000d30:	701a      	strb	r2, [r3, #0]

	// Update PSP to SP of new task
	__set_PSP((U32)kernel_config.TCBS[new_task].SP);
 8000d32:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <new_task+0x80>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	015b      	lsls	r3, r3, #5
 8000d38:	4413      	add	r3, r2
 8000d3a:	330c      	adds	r3, #12
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f383 8809 	msr	PSP, r3
}
 8000d46:	bf00      	nop

	return;
 8000d48:	bf00      	nop
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200008bc 	.word	0x200008bc

08000d54 <osCreateDeadlineTask>:
	}

	return RTX_OK;
}

int osCreateDeadlineTask(int deadline, TCB* task){
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	if(kernel_config.num_running_tasks >= MAX_TASKS || deadline <= 0){
 8000d5e:	4b61      	ldr	r3, [pc, #388]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000d60:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d802      	bhi.n	8000d6e <osCreateDeadlineTask+0x1a>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dc02      	bgt.n	8000d74 <osCreateDeadlineTask+0x20>
		return RTX_ERR;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e0b2      	b.n	8000eda <osCreateDeadlineTask+0x186>
	}

	int create_tid = -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i =1; i < MAX_TASKS; i++){
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
 8000d7e:	e018      	b.n	8000db2 <osCreateDeadlineTask+0x5e>
		if(kernel_config.TCBS[i].tid == TID_DORMANT && (kernel_config.TCBS[i]).stack_size >= task->stack_size){
 8000d80:	4a58      	ldr	r2, [pc, #352]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	015b      	lsls	r3, r3, #5
 8000d86:	4413      	add	r3, r2
 8000d88:	3304      	adds	r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d10c      	bne.n	8000dac <osCreateDeadlineTask+0x58>
 8000d92:	4a54      	ldr	r2, [pc, #336]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	015b      	lsls	r3, r3, #5
 8000d98:	4413      	add	r3, r2
 8000d9a:	330a      	adds	r3, #10
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	895b      	ldrh	r3, [r3, #10]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d302      	bcc.n	8000dac <osCreateDeadlineTask+0x58>
			create_tid = i;
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8000daa:	e005      	b.n	8000db8 <osCreateDeadlineTask+0x64>
	for(int i =1; i < MAX_TASKS; i++){
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	3301      	adds	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	dde3      	ble.n	8000d80 <osCreateDeadlineTask+0x2c>
		}
	}
	if(create_tid == -1){
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbe:	d102      	bne.n	8000dc6 <osCreateDeadlineTask+0x72>
		return RTX_ERR;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	e089      	b.n	8000eda <osCreateDeadlineTask+0x186>
	}

	TCB* create_tcb = &kernel_config.TCBS[create_tid];
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4a46      	ldr	r2, [pc, #280]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
	*create_tcb= *task;
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	4614      	mov	r4, r2
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	create_tcb->tid = create_tid;
 8000de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	605a      	str	r2, [r3, #4]

	if(STACK_SIZE > task->stack_size){
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	895b      	ldrh	r3, [r3, #10]
 8000dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df2:	d204      	bcs.n	8000dfe <osCreateDeadlineTask+0xaa>
		create_tcb->stack_size = STACK_SIZE;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfa:	815a      	strh	r2, [r3, #10]
 8000dfc:	e003      	b.n	8000e06 <osCreateDeadlineTask+0xb2>
	}else{
		create_tcb->stack_size=task->stack_size;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	895a      	ldrh	r2, [r3, #10]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	815a      	strh	r2, [r3, #10]
	}

	create_tcb->ptask = task->ptask;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	601a      	str	r2, [r3, #0]

	create_tcb->p_stack_mem = (U32*)(k_mem_alloc(create_tcb->stack_size));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	895b      	ldrh	r3, [r3, #10]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd0a 	bl	800082c <k_mem_alloc>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	611a      	str	r2, [r3, #16]
	create_tcb->SP = (U32*)((U32)create_tcb->p_stack_mem + (U32)create_tcb->stack_size);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	461a      	mov	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	895b      	ldrh	r3, [r3, #10]
 8000e28:	4413      	add	r3, r2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	60da      	str	r2, [r3, #12]

	// Initialize the stack for the task

	U32* test = task->ptask;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	613b      	str	r3, [r7, #16]
	U32* stackptr = (U32*)create_tcb->SP;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	61fb      	str	r3, [r7, #28]

	// Set up initial stack frame
	*(--stackptr) = 1 << 24;                    // xPSR, setting Thumb mode
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e48:	601a      	str	r2, [r3, #0]
	*(--stackptr) = task->ptask;      		// PC, function address
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b04      	subs	r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	e008      	b.n	8000e70 <osCreateDeadlineTask+0x11c>
		*(--stackptr) = 0xA;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b04      	subs	r3, #4
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	220a      	movs	r2, #10
 8000e68:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b0d      	cmp	r3, #13
 8000e74:	ddf3      	ble.n	8000e5e <osCreateDeadlineTask+0x10a>
	}

	create_tcb->SP = stackptr;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	60da      	str	r2, [r3, #12]

	// Copy the initialized TCB back to the provided task structure
	kernel_config.num_running_tasks++;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000e7e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000e88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	create_tcb->state = TASK_READY;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	721a      	strb	r2, [r3, #8]
	create_tcb->tid = create_tid;
 8000e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	605a      	str	r2, [r3, #4]
	create_tcb->deadline = deadline;
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	619a      	str	r2, [r3, #24]
	create_tcb->remaining_time = deadline;
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	61da      	str	r2, [r3, #28]
	create_tcb->remaining_sleep_time = DEFAULT_SLEEP_TIME;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eaa:	615a      	str	r2, [r3, #20]

	/* Schedule newly created task if it has shorter time slice */
	//print_kernel_info();

	//get time slice of running function
	U32 current_task_remaing_time =  kernel_config.TCBS[kernel_config.running_task].remaining_time;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000eae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000eb4:	015b      	lsls	r3, r3, #5
 8000eb6:	4413      	add	r3, r2
 8000eb8:	331c      	adds	r3, #28
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]

	if ((create_tcb->remaining_time < current_task_remaing_time) && (kernel_config.running_task != TID_DORMANT))
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d907      	bls.n	8000ed8 <osCreateDeadlineTask+0x184>
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <osCreateDeadlineTask+0x190>)
 8000eca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d001      	beq.n	8000ed8 <osCreateDeadlineTask+0x184>
	{
		ContextSwitch();
 8000ed4:	f7ff fdc4 	bl	8000a60 <ContextSwitch>
	}

	return RTX_OK;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200008bc 	.word	0x200008bc

08000ee8 <osPeriodYield>:
	ContextSwitch();

	return;
}

void osPeriodYield(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	// because this is a periodic task which cant be scheduled till its period is over we set its state to sleeping
	kernel_config.TCBS[kernel_config.running_task].state = SLEEPING;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <osPeriodYield+0x40>)
 8000eee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <osPeriodYield+0x40>)
 8000ef4:	015b      	lsls	r3, r3, #5
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3308      	adds	r3, #8
 8000efa:	2203      	movs	r2, #3
 8000efc:	701a      	strb	r2, [r3, #0]
	// so out remaining sleeptime is actually just the remaining task time for this task
	kernel_config.TCBS[kernel_config.running_task].remaining_sleep_time = kernel_config.TCBS[kernel_config.running_task].remaining_time;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <osPeriodYield+0x40>)
 8000f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <osPeriodYield+0x40>)
 8000f06:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000f0a:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <osPeriodYield+0x40>)
 8000f0c:	0152      	lsls	r2, r2, #5
 8000f0e:	440a      	add	r2, r1
 8000f10:	321c      	adds	r2, #28
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	4904      	ldr	r1, [pc, #16]	@ (8000f28 <osPeriodYield+0x40>)
 8000f16:	015b      	lsls	r3, r3, #5
 8000f18:	440b      	add	r3, r1
 8000f1a:	3314      	adds	r3, #20
 8000f1c:	601a      	str	r2, [r3, #0]
	// call contextswitch
	ContextSwitch();
 8000f1e:	f7ff fd9f 	bl	8000a60 <ContextSwitch>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200008bc 	.word	0x200008bc

08000f2c <TaskA>:
int i_test = 0;

int i_test2 = 0;


void TaskA(void *) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%d, %d\r\n", i_test, i_test2);
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <TaskA+0x20>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <TaskA+0x24>)
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <TaskA+0x28>)
 8000f40:	f002 f84c 	bl	8002fdc <iprintf>
		osPeriodYield();
 8000f44:	f7ff ffd0 	bl	8000ee8 <osPeriodYield>
		printf("%d, %d\r\n", i_test, i_test2);
 8000f48:	bf00      	nop
 8000f4a:	e7f3      	b.n	8000f34 <TaskA+0x8>
 8000f4c:	20000ac4 	.word	0x20000ac4
 8000f50:	20000ac8 	.word	0x20000ac8
 8000f54:	08003de4 	.word	0x08003de4

08000f58 <TaskB>:
	}
}

void TaskB(void *) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		i_test = i_test + 1;
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <TaskB+0x1c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a03      	ldr	r2, [pc, #12]	@ (8000f74 <TaskB+0x1c>)
 8000f68:	6013      	str	r3, [r2, #0]
		osPeriodYield();
 8000f6a:	f7ff ffbd 	bl	8000ee8 <osPeriodYield>
		i_test = i_test + 1;
 8000f6e:	bf00      	nop
 8000f70:	e7f6      	b.n	8000f60 <TaskB+0x8>
 8000f72:	bf00      	nop
 8000f74:	20000ac4 	.word	0x20000ac4

08000f78 <TaskC>:
	}
}

void TaskC(void *) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		i_test2 = i_test2 + 1;
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <TaskC+0x1c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a03      	ldr	r2, [pc, #12]	@ (8000f94 <TaskC+0x1c>)
 8000f88:	6013      	str	r3, [r2, #0]
		osPeriodYield();
 8000f8a:	f7ff ffad 	bl	8000ee8 <osPeriodYield>
		i_test2 = i_test2 + 1;
 8000f8e:	bf00      	nop
 8000f90:	e7f6      	b.n	8000f80 <TaskC+0x8>
 8000f92:	bf00      	nop
 8000f94:	20000ac8 	.word	0x20000ac8

08000f98 <main>:
	}
}


int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  /* MCU Configuration: Don't change this or the whole chip won't work!*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fb5d 	bl	800165c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 fa27 	bl	80013f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 fabb 	bl	8001520 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000faa:	f000 fa8f 	bl	80014cc <MX_USART2_UART_Init>
  /* MCU Configuration is now complete. Start writing your code below this line */
  osKernelInit();
 8000fae:	f7ff fdc5 	bl	8000b3c <osKernelInit>
  k_mem_init();
 8000fb2:	f7ff fbf7 	bl	80007a4 <k_mem_init>

  //in main
  TCB st_mytask;
  st_mytask.stack_size = STACK_SIZE;
 8000fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fba:	817b      	strh	r3, [r7, #10]
  st_mytask.ptask = &TaskA;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <main+0x5c>)
 8000fbe:	603b      	str	r3, [r7, #0]
  osCreateDeadlineTask(4, &st_mytask);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fec5 	bl	8000d54 <osCreateDeadlineTask>

  st_mytask.ptask = &TaskB;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <main+0x60>)
 8000fcc:	603b      	str	r3, [r7, #0]
  osCreateDeadlineTask(4, &st_mytask);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2004      	movs	r0, #4
 8000fd4:	f7ff febe 	bl	8000d54 <osCreateDeadlineTask>

  st_mytask.ptask = &TaskC;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <main+0x64>)
 8000fda:	603b      	str	r3, [r7, #0]
  osCreateDeadlineTask(12, &st_mytask);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f7ff feb7 	bl	8000d54 <osCreateDeadlineTask>

  osKernelStart();
 8000fe6:	f7ff fe37 	bl	8000c58 <osKernelStart>

  printf("back to main\r\n");
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <main+0x68>)
 8000fec:	f002 f85e 	bl	80030ac <puts>
  while (1);
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <main+0x58>
 8000ff4:	08000f2d 	.word	0x08000f2d
 8000ff8:	08000f59 	.word	0x08000f59
 8000ffc:	08000f79 	.word	0x08000f79
 8001000:	08003df0 	.word	0x08003df0

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <HAL_MspInit+0x4c>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001042:	2007      	movs	r0, #7
 8001044:	f000 fc2e 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_UART_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12b      	bne.n	80010ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_UART_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_UART_MspInit+0x88>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_UART_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_UART_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_UART_MspInit+0x88>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ae:	230c      	movs	r3, #12
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_UART_MspInit+0x8c>)
 80010ca:	f000 fc1f 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("HARD FAULTED");
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <HardFault_Handler+0x10>)
 80010f2:	f001 ff73 	bl	8002fdc <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	bf00      	nop
 80010f8:	e7fd      	b.n	80010f6 <HardFault_Handler+0xa>
 80010fa:	bf00      	nop
 80010fc:	08003e00 	.word	0x08003e00

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
	__asm volatile(".global SVC_Handler_Main");
	__asm volatile(
 8001118:	f01e 0f04 	tst.w	lr, #4
 800111c:	bf0c      	ite	eq
 800111e:	f3ef 8008 	mrseq	r0, MSP
 8001122:	f3ef 8009 	mrsne	r0, PSP
 8001126:	f7ff bc71 	b.w	8000a0c <SVC_Handler_Main>
			"ITE EQ \n\t"
			"MRSEQ r0, MSP \n\t"
			"MRSNE r0, PSP \n\t"
			"B SVC_Handler_Main"
		);
	return;
 800112a:	bf00      	nop

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001142:	f000 fadd 	bl	8001700 <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  //print_kernel_info();

  if (!kernel_config.is_running) {
 8001146:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <SysTick_Handler+0x124>)
 8001148:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8082 	beq.w	8001256 <SysTick_Handler+0x11a>
    return;
  }

  for (int i = 1; i < MAX_TASKS; i++) {
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e078      	b.n	800124a <SysTick_Handler+0x10e>
    //TCB task = kernel_config.TCBS[i];
    
    if (kernel_config.TCBS[i].state == TASK_READY || kernel_config.TCBS[i].state == TASK_RUNNING) {
 8001158:	4a41      	ldr	r2, [pc, #260]	@ (8001260 <SysTick_Handler+0x124>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	015b      	lsls	r3, r3, #5
 800115e:	4413      	add	r3, r2
 8001160:	3308      	adds	r3, #8
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d007      	beq.n	8001178 <SysTick_Handler+0x3c>
 8001168:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <SysTick_Handler+0x124>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	015b      	lsls	r3, r3, #5
 800116e:	4413      	add	r3, r2
 8001170:	3308      	adds	r3, #8
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d12a      	bne.n	80011ce <SysTick_Handler+0x92>
      if (kernel_config.TCBS[i].remaining_time == 0) {
 8001178:	4a39      	ldr	r2, [pc, #228]	@ (8001260 <SysTick_Handler+0x124>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	015b      	lsls	r3, r3, #5
 800117e:	4413      	add	r3, r2
 8001180:	331c      	adds	r3, #28
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <SysTick_Handler+0x66>
    	  kernel_config.TCBS[i].remaining_time = kernel_config.TCBS[i].deadline;
 8001188:	4a35      	ldr	r2, [pc, #212]	@ (8001260 <SysTick_Handler+0x124>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	4413      	add	r3, r2
 8001190:	3318      	adds	r3, #24
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4932      	ldr	r1, [pc, #200]	@ (8001260 <SysTick_Handler+0x124>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	015b      	lsls	r3, r3, #5
 800119a:	440b      	add	r3, r1
 800119c:	331c      	adds	r3, #28
 800119e:	601a      	str	r2, [r3, #0]
      if (kernel_config.TCBS[i].remaining_time == 0) {
 80011a0:	e04f      	b.n	8001242 <SysTick_Handler+0x106>
      } else if(kernel_config.TCBS[i].remaining_time > 0){
 80011a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001260 <SysTick_Handler+0x124>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	4413      	add	r3, r2
 80011aa:	331c      	adds	r3, #28
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d047      	beq.n	8001242 <SysTick_Handler+0x106>
    	  kernel_config.TCBS[i].remaining_time--;
 80011b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001260 <SysTick_Handler+0x124>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	4413      	add	r3, r2
 80011ba:	331c      	adds	r3, #28
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1e5a      	subs	r2, r3, #1
 80011c0:	4927      	ldr	r1, [pc, #156]	@ (8001260 <SysTick_Handler+0x124>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	440b      	add	r3, r1
 80011c8:	331c      	adds	r3, #28
 80011ca:	601a      	str	r2, [r3, #0]
      if (kernel_config.TCBS[i].remaining_time == 0) {
 80011cc:	e039      	b.n	8001242 <SysTick_Handler+0x106>
      }

    } else if (kernel_config.TCBS[i].state == TASK_SLEEPING) {
 80011ce:	4a24      	ldr	r2, [pc, #144]	@ (8001260 <SysTick_Handler+0x124>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4413      	add	r3, r2
 80011d6:	3308      	adds	r3, #8
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d132      	bne.n	8001244 <SysTick_Handler+0x108>
      if (kernel_config.TCBS[i].remaining_sleep_time == 0) {
 80011de:	4a20      	ldr	r2, [pc, #128]	@ (8001260 <SysTick_Handler+0x124>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	4413      	add	r3, r2
 80011e6:	3314      	adds	r3, #20
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d113      	bne.n	8001216 <SysTick_Handler+0xda>
    	  kernel_config.TCBS[i].state = TASK_READY;
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <SysTick_Handler+0x124>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4413      	add	r3, r2
 80011f6:	3308      	adds	r3, #8
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    	  kernel_config.TCBS[i].remaining_time = kernel_config.TCBS[i].deadline;
 80011fc:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <SysTick_Handler+0x124>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	4413      	add	r3, r2
 8001204:	3318      	adds	r3, #24
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4915      	ldr	r1, [pc, #84]	@ (8001260 <SysTick_Handler+0x124>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	440b      	add	r3, r1
 8001210:	331c      	adds	r3, #28
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e016      	b.n	8001244 <SysTick_Handler+0x108>
      }else if(kernel_config.TCBS[i].remaining_sleep_time > 0){
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <SysTick_Handler+0x124>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	015b      	lsls	r3, r3, #5
 800121c:	4413      	add	r3, r2
 800121e:	3314      	adds	r3, #20
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00e      	beq.n	8001244 <SysTick_Handler+0x108>
    	  kernel_config.TCBS[i].remaining_sleep_time--;
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <SysTick_Handler+0x124>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	4413      	add	r3, r2
 800122e:	3314      	adds	r3, #20
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	490a      	ldr	r1, [pc, #40]	@ (8001260 <SysTick_Handler+0x124>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	440b      	add	r3, r1
 800123c:	3314      	adds	r3, #20
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e000      	b.n	8001244 <SysTick_Handler+0x108>
      if (kernel_config.TCBS[i].remaining_time == 0) {
 8001242:	bf00      	nop
  for (int i = 1; i < MAX_TASKS; i++) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	dd83      	ble.n	8001158 <SysTick_Handler+0x1c>
  /* 
  
  Scheduler call (placeholder till we know the function)
  
  */ 
  ContextSwitch();
 8001250:	f7ff fc06 	bl	8000a60 <ContextSwitch>
 8001254:	e000      	b.n	8001258 <SysTick_Handler+0x11c>
    return;
 8001256:	bf00      	nop
  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200008bc 	.word	0x200008bc

08001264 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
  }

  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e009      	b.n	80012c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f889 	bl	80013d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <_write+0x12>
  }
  return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f001 ffda 	bl	8003328 <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20018000 	.word	0x20018000
 80013a0:	00004000 	.word	0x00004000
 80013a4:	20000acc 	.word	0x20000acc
 80013a8:	20000c68 	.word	0x20000c68

080013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 80013d8:	1d39      	adds	r1, r7, #4
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2201      	movs	r2, #1
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <__io_putchar+0x20>)
 80013e2:	f001 f916 	bl	8002612 <HAL_UART_Transmit>
	return ch;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000ad0 	.word	0x20000ad0

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	@ 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f001 ff32 	bl	800326c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <SystemClock_Config+0xd0>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	@ 0x40
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <SystemClock_Config+0xd0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <SystemClock_Config+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001440:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <SystemClock_Config+0xd4>)
 8001442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <SystemClock_Config+0xd4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001468:	2310      	movs	r3, #16
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800146c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001470:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001472:	2304      	movs	r3, #4
 8001474:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001476:	2307      	movs	r3, #7
 8001478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fbe2 	bl	8001c48 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800148a:	f000 f8b7 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fe44 	bl	8002138 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014b6:	f000 f8a1 	bl	80015fc <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	@ 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_USART2_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 8001504:	f001 f838 	bl	8002578 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 f875 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000ad0 	.word	0x20000ad0
 800151c:	40004400 	.word	0x40004400

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2120      	movs	r1, #32
 80015aa:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <MX_GPIO_Init+0xd4>)
 80015ac:	f000 fb32 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <MX_GPIO_Init+0xd8>)
 80015c8:	f000 f9a0 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015cc:	2320      	movs	r3, #32
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_GPIO_Init+0xd4>)
 80015e4:	f000 f992 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	@ 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	@ (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	@ (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001632:	f7ff febb 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f001 fe7d 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fcad 	bl	8000f98 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800164c:	08003e6c 	.word	0x08003e6c
  ldr r2, =_sbss
 8001650:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001654:	20000c64 	.word	0x20000c64

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f90d 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fcb8 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f917 	bl	80018f2 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f8ed 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000004 	.word	0x20000004
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000000c 	.word	0x2000000c
 8001724:	20000b14 	.word	0x20000b14

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000b14 	.word	0x20000b14

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	@ 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff47 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff5c 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb0 	bl	8001860 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e159      	b.n	8001bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8148 	bne.w	8001bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a2 	beq.w	8001bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b54      	ldr	r3, [pc, #336]	@ (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a52      	ldr	r2, [pc, #328]	@ (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x202>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	@ (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x1fe>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	@ (8001c04 <HAL_GPIO_Init+0x2f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x1fa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	@ (8001c08 <HAL_GPIO_Init+0x2fc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x1f6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a45      	ldr	r2, [pc, #276]	@ (8001c0c <HAL_GPIO_Init+0x300>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x1f2>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	@ (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a2f      	ldr	r2, [pc, #188]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a24      	ldr	r2, [pc, #144]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f aea2 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e267      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4b88      	ldr	r3, [pc, #544]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b85      	ldr	r3, [pc, #532]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e242      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b76      	ldr	r3, [pc, #472]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b70      	ldr	r3, [pc, #448]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6f      	ldr	r2, [pc, #444]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b69      	ldr	r3, [pc, #420]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b66      	ldr	r3, [pc, #408]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fd12 	bl	8001728 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fd0e 	bl	8001728 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	@ 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e207      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fcfe 	bl	8001728 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fcfa 	bl	8001728 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f3      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b51      	ldr	r3, [pc, #324]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c7      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4937      	ldr	r1, [pc, #220]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fcb3 	bl	8001728 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fcaf 	bl	8001728 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a8      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4925      	ldr	r1, [pc, #148]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fc92 	bl	8001728 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc8e 	bl	8001728 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e187      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d036      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fc72 	bl	8001728 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fc6e 	bl	8001728 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e167      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fc5b 	bl	8001728 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fc57 	bl	8001728 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e150      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8097 	beq.w	8001fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b81      	ldr	r3, [pc, #516]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b7a      	ldr	r3, [pc, #488]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b77      	ldr	r3, [pc, #476]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b74      	ldr	r3, [pc, #464]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a73      	ldr	r2, [pc, #460]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fc17 	bl	8001728 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fc13 	bl	8001728 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e10c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b6a      	ldr	r3, [pc, #424]	@ (80020bc <HAL_RCC_OscConfig+0x474>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2ea>
 8001f24:	4b64      	ldr	r3, [pc, #400]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x30c>
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	4b5c      	ldr	r3, [pc, #368]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f54:	4b58      	ldr	r3, [pc, #352]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f58:	4a57      	ldr	r2, [pc, #348]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f60:	4b55      	ldr	r3, [pc, #340]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a54      	ldr	r2, [pc, #336]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fbd8 	bl	8001728 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fbd4 	bl	8001728 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0cb      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4b49      	ldr	r3, [pc, #292]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fbc2 	bl	8001728 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fbbe 	bl	8001728 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0b5      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a38      	ldr	r2, [pc, #224]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a1 	beq.w	8002128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d05c      	beq.n	80020ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d141      	bne.n	800207e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fb92 	bl	8001728 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fb8e 	bl	8001728 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e087      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	491b      	ldr	r1, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff fb67 	bl	8001728 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff fb63 	bl	8001728 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e05c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x416>
 800207c:	e054      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fb50 	bl	8001728 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff fb4c 	bl	8001728 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e045      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_OscConfig+0x470>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
 80020aa:	e03d      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e038      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4ec>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d121      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fa7e 	bl	8001728 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff fa7a 	bl	8001728 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f9de 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08003e10 	.word	0x08003e10
 80022fc:	20000004 	.word	0x20000004
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b094      	sub	sp, #80	@ 0x50
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002310:	2300      	movs	r3, #0
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002314:	2300      	movs	r3, #0
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b79      	ldr	r3, [pc, #484]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80e1 	bhi.w	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e0db      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b73      	ldr	r3, [pc, #460]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800233c:	e0db      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_GetSysClockFreq+0x208>)
 8002340:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002342:	e0d8      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800234c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b6d      	ldr	r3, [pc, #436]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002364:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
 8002372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4621      	mov	r1, r4
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	6139      	str	r1, [r7, #16]
 8002394:	4629      	mov	r1, r5
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023a8:	4659      	mov	r1, fp
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b2:	4651      	mov	r1, sl
 80023b4:	018a      	lsls	r2, r1, #6
 80023b6:	4651      	mov	r1, sl
 80023b8:	ebb2 0801 	subs.w	r8, r2, r1
 80023bc:	4659      	mov	r1, fp
 80023be:	eb63 0901 	sbc.w	r9, r3, r1
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d6:	4690      	mov	r8, r2
 80023d8:	4699      	mov	r9, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	eb18 0303 	adds.w	r3, r8, r3
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	462b      	mov	r3, r5
 80023e4:	eb49 0303 	adc.w	r3, r9, r3
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023f6:	4629      	mov	r1, r5
 80023f8:	024b      	lsls	r3, r1, #9
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002400:	4621      	mov	r1, r4
 8002402:	024a      	lsls	r2, r1, #9
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240a:	2200      	movs	r2, #0
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800240e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002414:	f7fd ff54 	bl	80002c0 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002420:	e058      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b38      	ldr	r3, [pc, #224]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	4618      	mov	r0, r3
 800242c:	4611      	mov	r1, r2
 800242e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
 8002438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	0159      	lsls	r1, r3, #5
 800244a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244e:	0150      	lsls	r0, r2, #5
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4641      	mov	r1, r8
 8002456:	ebb2 0a01 	subs.w	sl, r2, r1
 800245a:	4649      	mov	r1, r9
 800245c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800246c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002474:	ebb2 040a 	subs.w	r4, r2, sl
 8002478:	eb63 050b 	sbc.w	r5, r3, fp
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	00eb      	lsls	r3, r5, #3
 8002486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248a:	00e2      	lsls	r2, r4, #3
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	4643      	mov	r3, r8
 8002492:	18e3      	adds	r3, r4, r3
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	464b      	mov	r3, r9
 8002498:	eb45 0303 	adc.w	r3, r5, r3
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	61fa      	str	r2, [r7, #28]
 80024c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c8:	f7fd fefa 	bl	80002c0 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80024e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3750      	adds	r7, #80	@ 0x50
 80024fc:	46bd      	mov	sp, r7
 80024fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	08003e20 	.word	0x08003e20

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffdc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0b5b      	lsrs	r3, r3, #13
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08003e20 	.word	0x08003e20

08002578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e03f      	b.n	800260a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fd58 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f929 	bl	8002814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b08a      	sub	sp, #40	@ 0x28
 8002616:	af02      	add	r7, sp, #8
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	d17c      	bne.n	800272c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_UART_Transmit+0x2c>
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e075      	b.n	800272e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_UART_Transmit+0x3e>
 800264c:	2302      	movs	r3, #2
 800264e:	e06e      	b.n	800272e <HAL_UART_Transmit+0x11c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2221      	movs	r2, #33	@ 0x21
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002666:	f7ff f85f 	bl	8001728 <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002680:	d108      	bne.n	8002694 <HAL_UART_Transmit+0x82>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d104      	bne.n	8002694 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e003      	b.n	800269c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80026a4:	e02a      	b.n	80026fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f840 	bl	8002736 <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e036      	b.n	800272e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10b      	bne.n	80026de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	3302      	adds	r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	e007      	b.n	80026ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3301      	adds	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1cf      	bne.n	80026a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2140      	movs	r1, #64	@ 0x40
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f810 	bl	8002736 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b090      	sub	sp, #64	@ 0x40
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002746:	e050      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d04c      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x30>
 8002756:	f7fe ffe7 	bl	8001728 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002762:	429a      	cmp	r2, r3
 8002764:	d241      	bcs.n	80027ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800277c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002786:	637a      	str	r2, [r7, #52]	@ 0x34
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800278c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e5      	bne.n	8002766 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3314      	adds	r3, #20
 80027a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	613b      	str	r3, [r7, #16]
   return(result);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3314      	adds	r3, #20
 80027b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ba:	623a      	str	r2, [r7, #32]
 80027bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	69f9      	ldr	r1, [r7, #28]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	e841 2300 	strex	r3, r2, [r1]
 80027c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1e5      	bne.n	800279a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00f      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d09f      	beq.n	8002748 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3740      	adds	r7, #64	@ 0x40
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002818:	b0c0      	sub	sp, #256	@ 0x100
 800281a:	af00      	add	r7, sp, #0
 800281c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002830:	68d9      	ldr	r1, [r3, #12]
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	ea40 0301 	orr.w	r3, r0, r1
 800283c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	431a      	orrs	r2, r3
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	431a      	orrs	r2, r3
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800286c:	f021 010c 	bic.w	r1, r1, #12
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800287a:	430b      	orrs	r3, r1
 800287c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	6999      	ldr	r1, [r3, #24]
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	ea40 0301 	orr.w	r3, r0, r1
 800289a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae0 <UART_SetConfig+0x2cc>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d005      	beq.n	80028b4 <UART_SetConfig+0xa0>
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae4 <UART_SetConfig+0x2d0>)
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d104      	bne.n	80028be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b4:	f7ff fe4c 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80028b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028bc:	e003      	b.n	80028c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028be:	f7ff fe33 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80028c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d0:	f040 810c 	bne.w	8002aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028e6:	4622      	mov	r2, r4
 80028e8:	462b      	mov	r3, r5
 80028ea:	1891      	adds	r1, r2, r2
 80028ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028ee:	415b      	adcs	r3, r3
 80028f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028f6:	4621      	mov	r1, r4
 80028f8:	eb12 0801 	adds.w	r8, r2, r1
 80028fc:	4629      	mov	r1, r5
 80028fe:	eb43 0901 	adc.w	r9, r3, r1
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	4623      	mov	r3, r4
 800291c:	eb18 0303 	adds.w	r3, r8, r3
 8002920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002924:	462b      	mov	r3, r5
 8002926:	eb49 0303 	adc.w	r3, r9, r3
 800292a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800293a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800293e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002942:	460b      	mov	r3, r1
 8002944:	18db      	adds	r3, r3, r3
 8002946:	653b      	str	r3, [r7, #80]	@ 0x50
 8002948:	4613      	mov	r3, r2
 800294a:	eb42 0303 	adc.w	r3, r2, r3
 800294e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002958:	f7fd fcb2 	bl	80002c0 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <UART_SetConfig+0x2d4>)
 8002962:	fba3 2302 	umull	r2, r3, r3, r2
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	011c      	lsls	r4, r3, #4
 800296a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002974:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	1891      	adds	r1, r2, r2
 8002982:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002984:	415b      	adcs	r3, r3
 8002986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800298c:	4641      	mov	r1, r8
 800298e:	eb12 0a01 	adds.w	sl, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb43 0b01 	adc.w	fp, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ac:	4692      	mov	sl, r2
 80029ae:	469b      	mov	fp, r3
 80029b0:	4643      	mov	r3, r8
 80029b2:	eb1a 0303 	adds.w	r3, sl, r3
 80029b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ba:	464b      	mov	r3, r9
 80029bc:	eb4b 0303 	adc.w	r3, fp, r3
 80029c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029d8:	460b      	mov	r3, r1
 80029da:	18db      	adds	r3, r3, r3
 80029dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80029de:	4613      	mov	r3, r2
 80029e0:	eb42 0303 	adc.w	r3, r2, r3
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029ee:	f7fd fc67 	bl	80002c0 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <UART_SetConfig+0x2d4>)
 80029fa:	fba3 2301 	umull	r2, r3, r3, r1
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2264      	movs	r2, #100	@ 0x64
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	1acb      	subs	r3, r1, r3
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <UART_SetConfig+0x2d4>)
 8002a10:	fba3 2302 	umull	r2, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a1c:	441c      	add	r4, r3
 8002a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a30:	4642      	mov	r2, r8
 8002a32:	464b      	mov	r3, r9
 8002a34:	1891      	adds	r1, r2, r2
 8002a36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a38:	415b      	adcs	r3, r3
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a40:	4641      	mov	r1, r8
 8002a42:	1851      	adds	r1, r2, r1
 8002a44:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a46:	4649      	mov	r1, r9
 8002a48:	414b      	adcs	r3, r1
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a58:	4659      	mov	r1, fp
 8002a5a:	00cb      	lsls	r3, r1, #3
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a62:	4651      	mov	r1, sl
 8002a64:	00ca      	lsls	r2, r1, #3
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a74:	464b      	mov	r3, r9
 8002a76:	460a      	mov	r2, r1
 8002a78:	eb42 0303 	adc.w	r3, r2, r3
 8002a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a94:	460b      	mov	r3, r1
 8002a96:	18db      	adds	r3, r3, r3
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002aaa:	f7fd fc09 	bl	80002c0 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <UART_SetConfig+0x2d4>)
 8002ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2164      	movs	r1, #100	@ 0x64
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3332      	adds	r3, #50	@ 0x32
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <UART_SetConfig+0x2d4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 0207 	and.w	r2, r3, #7
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4422      	add	r2, r4
 8002ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002adc:	e106      	b.n	8002cec <UART_SetConfig+0x4d8>
 8002ade:	bf00      	nop
 8002ae0:	40011000 	.word	0x40011000
 8002ae4:	40011400 	.word	0x40011400
 8002ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002af6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002afe:	4642      	mov	r2, r8
 8002b00:	464b      	mov	r3, r9
 8002b02:	1891      	adds	r1, r2, r2
 8002b04:	6239      	str	r1, [r7, #32]
 8002b06:	415b      	adcs	r3, r3
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b0e:	4641      	mov	r1, r8
 8002b10:	1854      	adds	r4, r2, r1
 8002b12:	4649      	mov	r1, r9
 8002b14:	eb43 0501 	adc.w	r5, r3, r1
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b34:	464b      	mov	r3, r9
 8002b36:	eb45 0303 	adc.w	r3, r5, r3
 8002b3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	008b      	lsls	r3, r1, #2
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b64:	4621      	mov	r1, r4
 8002b66:	008a      	lsls	r2, r1, #2
 8002b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b6c:	f7fd fba8 	bl	80002c0 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b60      	ldr	r3, [pc, #384]	@ (8002cf8 <UART_SetConfig+0x4e4>)
 8002b76:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	011c      	lsls	r4, r3, #4
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	61b9      	str	r1, [r7, #24]
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	1851      	adds	r1, r2, r1
 8002ba4:	6139      	str	r1, [r7, #16]
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	414b      	adcs	r3, r1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	00cb      	lsls	r3, r1, #3
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	00ca      	lsls	r2, r1, #3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4642      	mov	r2, r8
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	008b      	lsls	r3, r1, #2
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c02:	4641      	mov	r1, r8
 8002c04:	008a      	lsls	r2, r1, #2
 8002c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c0a:	f7fd fb59 	bl	80002c0 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <UART_SetConfig+0x4e4>)
 8002c16:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2264      	movs	r2, #100	@ 0x64
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	1acb      	subs	r3, r1, r3
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	3332      	adds	r3, #50	@ 0x32
 8002c28:	4a33      	ldr	r2, [pc, #204]	@ (8002cf8 <UART_SetConfig+0x4e4>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c34:	441c      	add	r4, r3
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c54:	4641      	mov	r1, r8
 8002c56:	1851      	adds	r1, r2, r1
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	414b      	adcs	r3, r1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4651      	mov	r1, sl
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4651      	mov	r1, sl
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4642      	mov	r2, r8
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c86:	464b      	mov	r3, r9
 8002c88:	460a      	mov	r2, r1
 8002c8a:	eb42 0303 	adc.w	r3, r2, r3
 8002c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ca8:	4649      	mov	r1, r9
 8002caa:	008b      	lsls	r3, r1, #2
 8002cac:	4641      	mov	r1, r8
 8002cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	008a      	lsls	r2, r1, #2
 8002cb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cba:	f7fd fb01 	bl	80002c0 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <UART_SetConfig+0x4e4>)
 8002cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	2164      	movs	r1, #100	@ 0x64
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	3332      	adds	r3, #50	@ 0x32
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <UART_SetConfig+0x4e4>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4422      	add	r2, r4
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf8:	51eb851f 	.word	0x51eb851f

08002cfc <sbrk_aligned>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8002d3c <sbrk_aligned+0x40>)
 8002d00:	460c      	mov	r4, r1
 8002d02:	6831      	ldr	r1, [r6, #0]
 8002d04:	4605      	mov	r5, r0
 8002d06:	b911      	cbnz	r1, 8002d0e <sbrk_aligned+0x12>
 8002d08:	f000 faec 	bl	80032e4 <_sbrk_r>
 8002d0c:	6030      	str	r0, [r6, #0]
 8002d0e:	4621      	mov	r1, r4
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 fae7 	bl	80032e4 <_sbrk_r>
 8002d16:	1c43      	adds	r3, r0, #1
 8002d18:	d103      	bne.n	8002d22 <sbrk_aligned+0x26>
 8002d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8002d1e:	4620      	mov	r0, r4
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	1cc4      	adds	r4, r0, #3
 8002d24:	f024 0403 	bic.w	r4, r4, #3
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	d0f8      	beq.n	8002d1e <sbrk_aligned+0x22>
 8002d2c:	1a21      	subs	r1, r4, r0
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 fad8 	bl	80032e4 <_sbrk_r>
 8002d34:	3001      	adds	r0, #1
 8002d36:	d1f2      	bne.n	8002d1e <sbrk_aligned+0x22>
 8002d38:	e7ef      	b.n	8002d1a <sbrk_aligned+0x1e>
 8002d3a:	bf00      	nop
 8002d3c:	20000b18 	.word	0x20000b18

08002d40 <_malloc_r>:
 8002d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d44:	1ccd      	adds	r5, r1, #3
 8002d46:	f025 0503 	bic.w	r5, r5, #3
 8002d4a:	3508      	adds	r5, #8
 8002d4c:	2d0c      	cmp	r5, #12
 8002d4e:	bf38      	it	cc
 8002d50:	250c      	movcc	r5, #12
 8002d52:	2d00      	cmp	r5, #0
 8002d54:	4606      	mov	r6, r0
 8002d56:	db01      	blt.n	8002d5c <_malloc_r+0x1c>
 8002d58:	42a9      	cmp	r1, r5
 8002d5a:	d904      	bls.n	8002d66 <_malloc_r+0x26>
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	6033      	str	r3, [r6, #0]
 8002d60:	2000      	movs	r0, #0
 8002d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e3c <_malloc_r+0xfc>
 8002d6a:	f000 f869 	bl	8002e40 <__malloc_lock>
 8002d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d72:	461c      	mov	r4, r3
 8002d74:	bb44      	cbnz	r4, 8002dc8 <_malloc_r+0x88>
 8002d76:	4629      	mov	r1, r5
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f7ff ffbf 	bl	8002cfc <sbrk_aligned>
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	4604      	mov	r4, r0
 8002d82:	d158      	bne.n	8002e36 <_malloc_r+0xf6>
 8002d84:	f8d8 4000 	ldr.w	r4, [r8]
 8002d88:	4627      	mov	r7, r4
 8002d8a:	2f00      	cmp	r7, #0
 8002d8c:	d143      	bne.n	8002e16 <_malloc_r+0xd6>
 8002d8e:	2c00      	cmp	r4, #0
 8002d90:	d04b      	beq.n	8002e2a <_malloc_r+0xea>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	4639      	mov	r1, r7
 8002d96:	4630      	mov	r0, r6
 8002d98:	eb04 0903 	add.w	r9, r4, r3
 8002d9c:	f000 faa2 	bl	80032e4 <_sbrk_r>
 8002da0:	4581      	cmp	r9, r0
 8002da2:	d142      	bne.n	8002e2a <_malloc_r+0xea>
 8002da4:	6821      	ldr	r1, [r4, #0]
 8002da6:	1a6d      	subs	r5, r5, r1
 8002da8:	4629      	mov	r1, r5
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7ff ffa6 	bl	8002cfc <sbrk_aligned>
 8002db0:	3001      	adds	r0, #1
 8002db2:	d03a      	beq.n	8002e2a <_malloc_r+0xea>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	442b      	add	r3, r5
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	f8d8 3000 	ldr.w	r3, [r8]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	bb62      	cbnz	r2, 8002e1c <_malloc_r+0xdc>
 8002dc2:	f8c8 7000 	str.w	r7, [r8]
 8002dc6:	e00f      	b.n	8002de8 <_malloc_r+0xa8>
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	1b52      	subs	r2, r2, r5
 8002dcc:	d420      	bmi.n	8002e10 <_malloc_r+0xd0>
 8002dce:	2a0b      	cmp	r2, #11
 8002dd0:	d917      	bls.n	8002e02 <_malloc_r+0xc2>
 8002dd2:	1961      	adds	r1, r4, r5
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	6025      	str	r5, [r4, #0]
 8002dd8:	bf18      	it	ne
 8002dda:	6059      	strne	r1, [r3, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	bf08      	it	eq
 8002de0:	f8c8 1000 	streq.w	r1, [r8]
 8002de4:	5162      	str	r2, [r4, r5]
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 f82f 	bl	8002e4c <__malloc_unlock>
 8002dee:	f104 000b 	add.w	r0, r4, #11
 8002df2:	1d23      	adds	r3, r4, #4
 8002df4:	f020 0007 	bic.w	r0, r0, #7
 8002df8:	1ac2      	subs	r2, r0, r3
 8002dfa:	bf1c      	itt	ne
 8002dfc:	1a1b      	subne	r3, r3, r0
 8002dfe:	50a3      	strne	r3, [r4, r2]
 8002e00:	e7af      	b.n	8002d62 <_malloc_r+0x22>
 8002e02:	6862      	ldr	r2, [r4, #4]
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	bf0c      	ite	eq
 8002e08:	f8c8 2000 	streq.w	r2, [r8]
 8002e0c:	605a      	strne	r2, [r3, #4]
 8002e0e:	e7eb      	b.n	8002de8 <_malloc_r+0xa8>
 8002e10:	4623      	mov	r3, r4
 8002e12:	6864      	ldr	r4, [r4, #4]
 8002e14:	e7ae      	b.n	8002d74 <_malloc_r+0x34>
 8002e16:	463c      	mov	r4, r7
 8002e18:	687f      	ldr	r7, [r7, #4]
 8002e1a:	e7b6      	b.n	8002d8a <_malloc_r+0x4a>
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	42a3      	cmp	r3, r4
 8002e22:	d1fb      	bne.n	8002e1c <_malloc_r+0xdc>
 8002e24:	2300      	movs	r3, #0
 8002e26:	6053      	str	r3, [r2, #4]
 8002e28:	e7de      	b.n	8002de8 <_malloc_r+0xa8>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f000 f80c 	bl	8002e4c <__malloc_unlock>
 8002e34:	e794      	b.n	8002d60 <_malloc_r+0x20>
 8002e36:	6005      	str	r5, [r0, #0]
 8002e38:	e7d6      	b.n	8002de8 <_malloc_r+0xa8>
 8002e3a:	bf00      	nop
 8002e3c:	20000b1c 	.word	0x20000b1c

08002e40 <__malloc_lock>:
 8002e40:	4801      	ldr	r0, [pc, #4]	@ (8002e48 <__malloc_lock+0x8>)
 8002e42:	f000 ba9c 	b.w	800337e <__retarget_lock_acquire_recursive>
 8002e46:	bf00      	nop
 8002e48:	20000c60 	.word	0x20000c60

08002e4c <__malloc_unlock>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	@ (8002e54 <__malloc_unlock+0x8>)
 8002e4e:	f000 ba97 	b.w	8003380 <__retarget_lock_release_recursive>
 8002e52:	bf00      	nop
 8002e54:	20000c60 	.word	0x20000c60

08002e58 <std>:
 8002e58:	2300      	movs	r3, #0
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e66:	6083      	str	r3, [r0, #8]
 8002e68:	8181      	strh	r1, [r0, #12]
 8002e6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e6c:	81c2      	strh	r2, [r0, #14]
 8002e6e:	6183      	str	r3, [r0, #24]
 8002e70:	4619      	mov	r1, r3
 8002e72:	2208      	movs	r2, #8
 8002e74:	305c      	adds	r0, #92	@ 0x5c
 8002e76:	f000 f9f9 	bl	800326c <memset>
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <std+0x58>)
 8002e7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <std+0x5c>)
 8002e80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <std+0x60>)
 8002e84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <std+0x64>)
 8002e88:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <std+0x68>)
 8002e8c:	6224      	str	r4, [r4, #32]
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	d006      	beq.n	8002ea0 <std+0x48>
 8002e92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e96:	4294      	cmp	r4, r2
 8002e98:	d002      	beq.n	8002ea0 <std+0x48>
 8002e9a:	33d0      	adds	r3, #208	@ 0xd0
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d105      	bne.n	8002eac <std+0x54>
 8002ea0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea8:	f000 ba68 	b.w	800337c <__retarget_lock_init_recursive>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	bf00      	nop
 8002eb0:	080030bd 	.word	0x080030bd
 8002eb4:	080030df 	.word	0x080030df
 8002eb8:	08003117 	.word	0x08003117
 8002ebc:	0800313b 	.word	0x0800313b
 8002ec0:	20000b20 	.word	0x20000b20

08002ec4 <stdio_exit_handler>:
 8002ec4:	4a02      	ldr	r2, [pc, #8]	@ (8002ed0 <stdio_exit_handler+0xc>)
 8002ec6:	4903      	ldr	r1, [pc, #12]	@ (8002ed4 <stdio_exit_handler+0x10>)
 8002ec8:	4803      	ldr	r0, [pc, #12]	@ (8002ed8 <stdio_exit_handler+0x14>)
 8002eca:	f000 b869 	b.w	8002fa0 <_fwalk_sglue>
 8002ece:	bf00      	nop
 8002ed0:	20000010 	.word	0x20000010
 8002ed4:	08003ac1 	.word	0x08003ac1
 8002ed8:	20000020 	.word	0x20000020

08002edc <cleanup_stdio>:
 8002edc:	6841      	ldr	r1, [r0, #4]
 8002ede:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <cleanup_stdio+0x34>)
 8002ee0:	4299      	cmp	r1, r3
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	d001      	beq.n	8002eec <cleanup_stdio+0x10>
 8002ee8:	f000 fdea 	bl	8003ac0 <_fflush_r>
 8002eec:	68a1      	ldr	r1, [r4, #8]
 8002eee:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <cleanup_stdio+0x38>)
 8002ef0:	4299      	cmp	r1, r3
 8002ef2:	d002      	beq.n	8002efa <cleanup_stdio+0x1e>
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 fde3 	bl	8003ac0 <_fflush_r>
 8002efa:	68e1      	ldr	r1, [r4, #12]
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <cleanup_stdio+0x3c>)
 8002efe:	4299      	cmp	r1, r3
 8002f00:	d004      	beq.n	8002f0c <cleanup_stdio+0x30>
 8002f02:	4620      	mov	r0, r4
 8002f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f08:	f000 bdda 	b.w	8003ac0 <_fflush_r>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000b20 	.word	0x20000b20
 8002f14:	20000b88 	.word	0x20000b88
 8002f18:	20000bf0 	.word	0x20000bf0

08002f1c <global_stdio_init.part.0>:
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <global_stdio_init.part.0+0x30>)
 8002f20:	4c0b      	ldr	r4, [pc, #44]	@ (8002f50 <global_stdio_init.part.0+0x34>)
 8002f22:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <global_stdio_init.part.0+0x38>)
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4620      	mov	r0, r4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	f7ff ff94 	bl	8002e58 <std>
 8002f30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f34:	2201      	movs	r2, #1
 8002f36:	2109      	movs	r1, #9
 8002f38:	f7ff ff8e 	bl	8002e58 <std>
 8002f3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f40:	2202      	movs	r2, #2
 8002f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f46:	2112      	movs	r1, #18
 8002f48:	f7ff bf86 	b.w	8002e58 <std>
 8002f4c:	20000c58 	.word	0x20000c58
 8002f50:	20000b20 	.word	0x20000b20
 8002f54:	08002ec5 	.word	0x08002ec5

08002f58 <__sfp_lock_acquire>:
 8002f58:	4801      	ldr	r0, [pc, #4]	@ (8002f60 <__sfp_lock_acquire+0x8>)
 8002f5a:	f000 ba10 	b.w	800337e <__retarget_lock_acquire_recursive>
 8002f5e:	bf00      	nop
 8002f60:	20000c61 	.word	0x20000c61

08002f64 <__sfp_lock_release>:
 8002f64:	4801      	ldr	r0, [pc, #4]	@ (8002f6c <__sfp_lock_release+0x8>)
 8002f66:	f000 ba0b 	b.w	8003380 <__retarget_lock_release_recursive>
 8002f6a:	bf00      	nop
 8002f6c:	20000c61 	.word	0x20000c61

08002f70 <__sinit>:
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
 8002f74:	f7ff fff0 	bl	8002f58 <__sfp_lock_acquire>
 8002f78:	6a23      	ldr	r3, [r4, #32]
 8002f7a:	b11b      	cbz	r3, 8002f84 <__sinit+0x14>
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f80:	f7ff bff0 	b.w	8002f64 <__sfp_lock_release>
 8002f84:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <__sinit+0x28>)
 8002f86:	6223      	str	r3, [r4, #32]
 8002f88:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <__sinit+0x2c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f5      	bne.n	8002f7c <__sinit+0xc>
 8002f90:	f7ff ffc4 	bl	8002f1c <global_stdio_init.part.0>
 8002f94:	e7f2      	b.n	8002f7c <__sinit+0xc>
 8002f96:	bf00      	nop
 8002f98:	08002edd 	.word	0x08002edd
 8002f9c:	20000c58 	.word	0x20000c58

08002fa0 <_fwalk_sglue>:
 8002fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	4607      	mov	r7, r0
 8002fa6:	4688      	mov	r8, r1
 8002fa8:	4614      	mov	r4, r2
 8002faa:	2600      	movs	r6, #0
 8002fac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fb0:	f1b9 0901 	subs.w	r9, r9, #1
 8002fb4:	d505      	bpl.n	8002fc2 <_fwalk_sglue+0x22>
 8002fb6:	6824      	ldr	r4, [r4, #0]
 8002fb8:	2c00      	cmp	r4, #0
 8002fba:	d1f7      	bne.n	8002fac <_fwalk_sglue+0xc>
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc2:	89ab      	ldrh	r3, [r5, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d907      	bls.n	8002fd8 <_fwalk_sglue+0x38>
 8002fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	d003      	beq.n	8002fd8 <_fwalk_sglue+0x38>
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	47c0      	blx	r8
 8002fd6:	4306      	orrs	r6, r0
 8002fd8:	3568      	adds	r5, #104	@ 0x68
 8002fda:	e7e9      	b.n	8002fb0 <_fwalk_sglue+0x10>

08002fdc <iprintf>:
 8002fdc:	b40f      	push	{r0, r1, r2, r3}
 8002fde:	b507      	push	{r0, r1, r2, lr}
 8002fe0:	4906      	ldr	r1, [pc, #24]	@ (8002ffc <iprintf+0x20>)
 8002fe2:	ab04      	add	r3, sp, #16
 8002fe4:	6808      	ldr	r0, [r1, #0]
 8002fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fea:	6881      	ldr	r1, [r0, #8]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	f000 fa3d 	bl	800346c <_vfiprintf_r>
 8002ff2:	b003      	add	sp, #12
 8002ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ff8:	b004      	add	sp, #16
 8002ffa:	4770      	bx	lr
 8002ffc:	2000001c 	.word	0x2000001c

08003000 <_puts_r>:
 8003000:	6a03      	ldr	r3, [r0, #32]
 8003002:	b570      	push	{r4, r5, r6, lr}
 8003004:	6884      	ldr	r4, [r0, #8]
 8003006:	4605      	mov	r5, r0
 8003008:	460e      	mov	r6, r1
 800300a:	b90b      	cbnz	r3, 8003010 <_puts_r+0x10>
 800300c:	f7ff ffb0 	bl	8002f70 <__sinit>
 8003010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003012:	07db      	lsls	r3, r3, #31
 8003014:	d405      	bmi.n	8003022 <_puts_r+0x22>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	0598      	lsls	r0, r3, #22
 800301a:	d402      	bmi.n	8003022 <_puts_r+0x22>
 800301c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800301e:	f000 f9ae 	bl	800337e <__retarget_lock_acquire_recursive>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	0719      	lsls	r1, r3, #28
 8003026:	d502      	bpl.n	800302e <_puts_r+0x2e>
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d135      	bne.n	800309a <_puts_r+0x9a>
 800302e:	4621      	mov	r1, r4
 8003030:	4628      	mov	r0, r5
 8003032:	f000 f8c5 	bl	80031c0 <__swsetup_r>
 8003036:	b380      	cbz	r0, 800309a <_puts_r+0x9a>
 8003038:	f04f 35ff 	mov.w	r5, #4294967295
 800303c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800303e:	07da      	lsls	r2, r3, #31
 8003040:	d405      	bmi.n	800304e <_puts_r+0x4e>
 8003042:	89a3      	ldrh	r3, [r4, #12]
 8003044:	059b      	lsls	r3, r3, #22
 8003046:	d402      	bmi.n	800304e <_puts_r+0x4e>
 8003048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800304a:	f000 f999 	bl	8003380 <__retarget_lock_release_recursive>
 800304e:	4628      	mov	r0, r5
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	2b00      	cmp	r3, #0
 8003054:	da04      	bge.n	8003060 <_puts_r+0x60>
 8003056:	69a2      	ldr	r2, [r4, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	dc17      	bgt.n	800308c <_puts_r+0x8c>
 800305c:	290a      	cmp	r1, #10
 800305e:	d015      	beq.n	800308c <_puts_r+0x8c>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	6022      	str	r2, [r4, #0]
 8003066:	7019      	strb	r1, [r3, #0]
 8003068:	68a3      	ldr	r3, [r4, #8]
 800306a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800306e:	3b01      	subs	r3, #1
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	2900      	cmp	r1, #0
 8003074:	d1ed      	bne.n	8003052 <_puts_r+0x52>
 8003076:	2b00      	cmp	r3, #0
 8003078:	da11      	bge.n	800309e <_puts_r+0x9e>
 800307a:	4622      	mov	r2, r4
 800307c:	210a      	movs	r1, #10
 800307e:	4628      	mov	r0, r5
 8003080:	f000 f85f 	bl	8003142 <__swbuf_r>
 8003084:	3001      	adds	r0, #1
 8003086:	d0d7      	beq.n	8003038 <_puts_r+0x38>
 8003088:	250a      	movs	r5, #10
 800308a:	e7d7      	b.n	800303c <_puts_r+0x3c>
 800308c:	4622      	mov	r2, r4
 800308e:	4628      	mov	r0, r5
 8003090:	f000 f857 	bl	8003142 <__swbuf_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d1e7      	bne.n	8003068 <_puts_r+0x68>
 8003098:	e7ce      	b.n	8003038 <_puts_r+0x38>
 800309a:	3e01      	subs	r6, #1
 800309c:	e7e4      	b.n	8003068 <_puts_r+0x68>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	6022      	str	r2, [r4, #0]
 80030a4:	220a      	movs	r2, #10
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e7ee      	b.n	8003088 <_puts_r+0x88>
	...

080030ac <puts>:
 80030ac:	4b02      	ldr	r3, [pc, #8]	@ (80030b8 <puts+0xc>)
 80030ae:	4601      	mov	r1, r0
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f7ff bfa5 	b.w	8003000 <_puts_r>
 80030b6:	bf00      	nop
 80030b8:	2000001c 	.word	0x2000001c

080030bc <__sread>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	460c      	mov	r4, r1
 80030c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c4:	f000 f8fc 	bl	80032c0 <_read_r>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	bfab      	itete	ge
 80030cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030ce:	89a3      	ldrhlt	r3, [r4, #12]
 80030d0:	181b      	addge	r3, r3, r0
 80030d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030d6:	bfac      	ite	ge
 80030d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030da:	81a3      	strhlt	r3, [r4, #12]
 80030dc:	bd10      	pop	{r4, pc}

080030de <__swrite>:
 80030de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	461f      	mov	r7, r3
 80030e4:	898b      	ldrh	r3, [r1, #12]
 80030e6:	05db      	lsls	r3, r3, #23
 80030e8:	4605      	mov	r5, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	4616      	mov	r6, r2
 80030ee:	d505      	bpl.n	80030fc <__swrite+0x1e>
 80030f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f4:	2302      	movs	r3, #2
 80030f6:	2200      	movs	r2, #0
 80030f8:	f000 f8d0 	bl	800329c <_lseek_r>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	4632      	mov	r2, r6
 800310a:	463b      	mov	r3, r7
 800310c:	4628      	mov	r0, r5
 800310e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003112:	f000 b8f7 	b.w	8003304 <_write_r>

08003116 <__sseek>:
 8003116:	b510      	push	{r4, lr}
 8003118:	460c      	mov	r4, r1
 800311a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311e:	f000 f8bd 	bl	800329c <_lseek_r>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	bf15      	itete	ne
 8003128:	6560      	strne	r0, [r4, #84]	@ 0x54
 800312a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800312e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003132:	81a3      	strheq	r3, [r4, #12]
 8003134:	bf18      	it	ne
 8003136:	81a3      	strhne	r3, [r4, #12]
 8003138:	bd10      	pop	{r4, pc}

0800313a <__sclose>:
 800313a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313e:	f000 b89d 	b.w	800327c <_close_r>

08003142 <__swbuf_r>:
 8003142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003144:	460e      	mov	r6, r1
 8003146:	4614      	mov	r4, r2
 8003148:	4605      	mov	r5, r0
 800314a:	b118      	cbz	r0, 8003154 <__swbuf_r+0x12>
 800314c:	6a03      	ldr	r3, [r0, #32]
 800314e:	b90b      	cbnz	r3, 8003154 <__swbuf_r+0x12>
 8003150:	f7ff ff0e 	bl	8002f70 <__sinit>
 8003154:	69a3      	ldr	r3, [r4, #24]
 8003156:	60a3      	str	r3, [r4, #8]
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	071a      	lsls	r2, r3, #28
 800315c:	d501      	bpl.n	8003162 <__swbuf_r+0x20>
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	b943      	cbnz	r3, 8003174 <__swbuf_r+0x32>
 8003162:	4621      	mov	r1, r4
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f82b 	bl	80031c0 <__swsetup_r>
 800316a:	b118      	cbz	r0, 8003174 <__swbuf_r+0x32>
 800316c:	f04f 37ff 	mov.w	r7, #4294967295
 8003170:	4638      	mov	r0, r7
 8003172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	6922      	ldr	r2, [r4, #16]
 8003178:	1a98      	subs	r0, r3, r2
 800317a:	6963      	ldr	r3, [r4, #20]
 800317c:	b2f6      	uxtb	r6, r6
 800317e:	4283      	cmp	r3, r0
 8003180:	4637      	mov	r7, r6
 8003182:	dc05      	bgt.n	8003190 <__swbuf_r+0x4e>
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f000 fc9a 	bl	8003ac0 <_fflush_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	d1ed      	bne.n	800316c <__swbuf_r+0x2a>
 8003190:	68a3      	ldr	r3, [r4, #8]
 8003192:	3b01      	subs	r3, #1
 8003194:	60a3      	str	r3, [r4, #8]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	6022      	str	r2, [r4, #0]
 800319c:	701e      	strb	r6, [r3, #0]
 800319e:	6962      	ldr	r2, [r4, #20]
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d004      	beq.n	80031b0 <__swbuf_r+0x6e>
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	07db      	lsls	r3, r3, #31
 80031aa:	d5e1      	bpl.n	8003170 <__swbuf_r+0x2e>
 80031ac:	2e0a      	cmp	r6, #10
 80031ae:	d1df      	bne.n	8003170 <__swbuf_r+0x2e>
 80031b0:	4621      	mov	r1, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 fc84 	bl	8003ac0 <_fflush_r>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0d9      	beq.n	8003170 <__swbuf_r+0x2e>
 80031bc:	e7d6      	b.n	800316c <__swbuf_r+0x2a>
	...

080031c0 <__swsetup_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <__swsetup_r+0xa8>)
 80031c4:	4605      	mov	r5, r0
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	460c      	mov	r4, r1
 80031ca:	b118      	cbz	r0, 80031d4 <__swsetup_r+0x14>
 80031cc:	6a03      	ldr	r3, [r0, #32]
 80031ce:	b90b      	cbnz	r3, 80031d4 <__swsetup_r+0x14>
 80031d0:	f7ff fece 	bl	8002f70 <__sinit>
 80031d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d8:	0719      	lsls	r1, r3, #28
 80031da:	d422      	bmi.n	8003222 <__swsetup_r+0x62>
 80031dc:	06da      	lsls	r2, r3, #27
 80031de:	d407      	bmi.n	80031f0 <__swsetup_r+0x30>
 80031e0:	2209      	movs	r2, #9
 80031e2:	602a      	str	r2, [r5, #0]
 80031e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031e8:	81a3      	strh	r3, [r4, #12]
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295
 80031ee:	e033      	b.n	8003258 <__swsetup_r+0x98>
 80031f0:	0758      	lsls	r0, r3, #29
 80031f2:	d512      	bpl.n	800321a <__swsetup_r+0x5a>
 80031f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031f6:	b141      	cbz	r1, 800320a <__swsetup_r+0x4a>
 80031f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031fc:	4299      	cmp	r1, r3
 80031fe:	d002      	beq.n	8003206 <__swsetup_r+0x46>
 8003200:	4628      	mov	r0, r5
 8003202:	f000 f8bf 	bl	8003384 <_free_r>
 8003206:	2300      	movs	r3, #0
 8003208:	6363      	str	r3, [r4, #52]	@ 0x34
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	6923      	ldr	r3, [r4, #16]
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	b94b      	cbnz	r3, 800323a <__swsetup_r+0x7a>
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800322c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003230:	d003      	beq.n	800323a <__swsetup_r+0x7a>
 8003232:	4621      	mov	r1, r4
 8003234:	4628      	mov	r0, r5
 8003236:	f000 fc91 	bl	8003b5c <__smakebuf_r>
 800323a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800323e:	f013 0201 	ands.w	r2, r3, #1
 8003242:	d00a      	beq.n	800325a <__swsetup_r+0x9a>
 8003244:	2200      	movs	r2, #0
 8003246:	60a2      	str	r2, [r4, #8]
 8003248:	6962      	ldr	r2, [r4, #20]
 800324a:	4252      	negs	r2, r2
 800324c:	61a2      	str	r2, [r4, #24]
 800324e:	6922      	ldr	r2, [r4, #16]
 8003250:	b942      	cbnz	r2, 8003264 <__swsetup_r+0xa4>
 8003252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003256:	d1c5      	bne.n	80031e4 <__swsetup_r+0x24>
 8003258:	bd38      	pop	{r3, r4, r5, pc}
 800325a:	0799      	lsls	r1, r3, #30
 800325c:	bf58      	it	pl
 800325e:	6962      	ldrpl	r2, [r4, #20]
 8003260:	60a2      	str	r2, [r4, #8]
 8003262:	e7f4      	b.n	800324e <__swsetup_r+0x8e>
 8003264:	2000      	movs	r0, #0
 8003266:	e7f7      	b.n	8003258 <__swsetup_r+0x98>
 8003268:	2000001c 	.word	0x2000001c

0800326c <memset>:
 800326c:	4402      	add	r2, r0
 800326e:	4603      	mov	r3, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <_close_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4d06      	ldr	r5, [pc, #24]	@ (8003298 <_close_r+0x1c>)
 8003280:	2300      	movs	r3, #0
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	f7fe f825 	bl	80012d6 <_close>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_close_r+0x1a>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_close_r+0x1a>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	20000c5c 	.word	0x20000c5c

0800329c <_lseek_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4d07      	ldr	r5, [pc, #28]	@ (80032bc <_lseek_r+0x20>)
 80032a0:	4604      	mov	r4, r0
 80032a2:	4608      	mov	r0, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	2200      	movs	r2, #0
 80032a8:	602a      	str	r2, [r5, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f7fe f83a 	bl	8001324 <_lseek>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_lseek_r+0x1e>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_lseek_r+0x1e>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	20000c5c 	.word	0x20000c5c

080032c0 <_read_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4d07      	ldr	r5, [pc, #28]	@ (80032e0 <_read_r+0x20>)
 80032c4:	4604      	mov	r4, r0
 80032c6:	4608      	mov	r0, r1
 80032c8:	4611      	mov	r1, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	602a      	str	r2, [r5, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7fd ffc8 	bl	8001264 <_read>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_read_r+0x1e>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_read_r+0x1e>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20000c5c 	.word	0x20000c5c

080032e4 <_sbrk_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4d06      	ldr	r5, [pc, #24]	@ (8003300 <_sbrk_r+0x1c>)
 80032e8:	2300      	movs	r3, #0
 80032ea:	4604      	mov	r4, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	602b      	str	r3, [r5, #0]
 80032f0:	f7fe f826 	bl	8001340 <_sbrk>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_sbrk_r+0x1a>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_sbrk_r+0x1a>
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	20000c5c 	.word	0x20000c5c

08003304 <_write_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d07      	ldr	r5, [pc, #28]	@ (8003324 <_write_r+0x20>)
 8003308:	4604      	mov	r4, r0
 800330a:	4608      	mov	r0, r1
 800330c:	4611      	mov	r1, r2
 800330e:	2200      	movs	r2, #0
 8003310:	602a      	str	r2, [r5, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	f7fd ffc3 	bl	800129e <_write>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_write_r+0x1e>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_write_r+0x1e>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000c5c 	.word	0x20000c5c

08003328 <__errno>:
 8003328:	4b01      	ldr	r3, [pc, #4]	@ (8003330 <__errno+0x8>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000001c 	.word	0x2000001c

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4d0d      	ldr	r5, [pc, #52]	@ (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	@ (8003370 <__libc_init_array+0x3c>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2600      	movs	r6, #0
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4d0b      	ldr	r5, [pc, #44]	@ (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	@ (8003378 <__libc_init_array+0x44>)
 8003348:	f000 fc66 	bl	8003c18 <_init>
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2600      	movs	r6, #0
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	08003e64 	.word	0x08003e64
 8003370:	08003e64 	.word	0x08003e64
 8003374:	08003e64 	.word	0x08003e64
 8003378:	08003e68 	.word	0x08003e68

0800337c <__retarget_lock_init_recursive>:
 800337c:	4770      	bx	lr

0800337e <__retarget_lock_acquire_recursive>:
 800337e:	4770      	bx	lr

08003380 <__retarget_lock_release_recursive>:
 8003380:	4770      	bx	lr
	...

08003384 <_free_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4605      	mov	r5, r0
 8003388:	2900      	cmp	r1, #0
 800338a:	d041      	beq.n	8003410 <_free_r+0x8c>
 800338c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003390:	1f0c      	subs	r4, r1, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bfb8      	it	lt
 8003396:	18e4      	addlt	r4, r4, r3
 8003398:	f7ff fd52 	bl	8002e40 <__malloc_lock>
 800339c:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <_free_r+0x90>)
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	b933      	cbnz	r3, 80033b0 <_free_r+0x2c>
 80033a2:	6063      	str	r3, [r4, #4]
 80033a4:	6014      	str	r4, [r2, #0]
 80033a6:	4628      	mov	r0, r5
 80033a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ac:	f7ff bd4e 	b.w	8002e4c <__malloc_unlock>
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	d908      	bls.n	80033c6 <_free_r+0x42>
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	1821      	adds	r1, r4, r0
 80033b8:	428b      	cmp	r3, r1
 80033ba:	bf01      	itttt	eq
 80033bc:	6819      	ldreq	r1, [r3, #0]
 80033be:	685b      	ldreq	r3, [r3, #4]
 80033c0:	1809      	addeq	r1, r1, r0
 80033c2:	6021      	streq	r1, [r4, #0]
 80033c4:	e7ed      	b.n	80033a2 <_free_r+0x1e>
 80033c6:	461a      	mov	r2, r3
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	b10b      	cbz	r3, 80033d0 <_free_r+0x4c>
 80033cc:	42a3      	cmp	r3, r4
 80033ce:	d9fa      	bls.n	80033c6 <_free_r+0x42>
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	1850      	adds	r0, r2, r1
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	d10b      	bne.n	80033f0 <_free_r+0x6c>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	4401      	add	r1, r0
 80033dc:	1850      	adds	r0, r2, r1
 80033de:	4283      	cmp	r3, r0
 80033e0:	6011      	str	r1, [r2, #0]
 80033e2:	d1e0      	bne.n	80033a6 <_free_r+0x22>
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	6053      	str	r3, [r2, #4]
 80033ea:	4408      	add	r0, r1
 80033ec:	6010      	str	r0, [r2, #0]
 80033ee:	e7da      	b.n	80033a6 <_free_r+0x22>
 80033f0:	d902      	bls.n	80033f8 <_free_r+0x74>
 80033f2:	230c      	movs	r3, #12
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	e7d6      	b.n	80033a6 <_free_r+0x22>
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	1821      	adds	r1, r4, r0
 80033fc:	428b      	cmp	r3, r1
 80033fe:	bf04      	itt	eq
 8003400:	6819      	ldreq	r1, [r3, #0]
 8003402:	685b      	ldreq	r3, [r3, #4]
 8003404:	6063      	str	r3, [r4, #4]
 8003406:	bf04      	itt	eq
 8003408:	1809      	addeq	r1, r1, r0
 800340a:	6021      	streq	r1, [r4, #0]
 800340c:	6054      	str	r4, [r2, #4]
 800340e:	e7ca      	b.n	80033a6 <_free_r+0x22>
 8003410:	bd38      	pop	{r3, r4, r5, pc}
 8003412:	bf00      	nop
 8003414:	20000b1c 	.word	0x20000b1c

08003418 <__sfputc_r>:
 8003418:	6893      	ldr	r3, [r2, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	b410      	push	{r4}
 8003420:	6093      	str	r3, [r2, #8]
 8003422:	da08      	bge.n	8003436 <__sfputc_r+0x1e>
 8003424:	6994      	ldr	r4, [r2, #24]
 8003426:	42a3      	cmp	r3, r4
 8003428:	db01      	blt.n	800342e <__sfputc_r+0x16>
 800342a:	290a      	cmp	r1, #10
 800342c:	d103      	bne.n	8003436 <__sfputc_r+0x1e>
 800342e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003432:	f7ff be86 	b.w	8003142 <__swbuf_r>
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	1c58      	adds	r0, r3, #1
 800343a:	6010      	str	r0, [r2, #0]
 800343c:	7019      	strb	r1, [r3, #0]
 800343e:	4608      	mov	r0, r1
 8003440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003444:	4770      	bx	lr

08003446 <__sfputs_r>:
 8003446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003448:	4606      	mov	r6, r0
 800344a:	460f      	mov	r7, r1
 800344c:	4614      	mov	r4, r2
 800344e:	18d5      	adds	r5, r2, r3
 8003450:	42ac      	cmp	r4, r5
 8003452:	d101      	bne.n	8003458 <__sfputs_r+0x12>
 8003454:	2000      	movs	r0, #0
 8003456:	e007      	b.n	8003468 <__sfputs_r+0x22>
 8003458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800345c:	463a      	mov	r2, r7
 800345e:	4630      	mov	r0, r6
 8003460:	f7ff ffda 	bl	8003418 <__sfputc_r>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d1f3      	bne.n	8003450 <__sfputs_r+0xa>
 8003468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800346c <_vfiprintf_r>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	460d      	mov	r5, r1
 8003472:	b09d      	sub	sp, #116	@ 0x74
 8003474:	4614      	mov	r4, r2
 8003476:	4698      	mov	r8, r3
 8003478:	4606      	mov	r6, r0
 800347a:	b118      	cbz	r0, 8003484 <_vfiprintf_r+0x18>
 800347c:	6a03      	ldr	r3, [r0, #32]
 800347e:	b90b      	cbnz	r3, 8003484 <_vfiprintf_r+0x18>
 8003480:	f7ff fd76 	bl	8002f70 <__sinit>
 8003484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003486:	07d9      	lsls	r1, r3, #31
 8003488:	d405      	bmi.n	8003496 <_vfiprintf_r+0x2a>
 800348a:	89ab      	ldrh	r3, [r5, #12]
 800348c:	059a      	lsls	r2, r3, #22
 800348e:	d402      	bmi.n	8003496 <_vfiprintf_r+0x2a>
 8003490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003492:	f7ff ff74 	bl	800337e <__retarget_lock_acquire_recursive>
 8003496:	89ab      	ldrh	r3, [r5, #12]
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	d501      	bpl.n	80034a0 <_vfiprintf_r+0x34>
 800349c:	692b      	ldr	r3, [r5, #16]
 800349e:	b99b      	cbnz	r3, 80034c8 <_vfiprintf_r+0x5c>
 80034a0:	4629      	mov	r1, r5
 80034a2:	4630      	mov	r0, r6
 80034a4:	f7ff fe8c 	bl	80031c0 <__swsetup_r>
 80034a8:	b170      	cbz	r0, 80034c8 <_vfiprintf_r+0x5c>
 80034aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034ac:	07dc      	lsls	r4, r3, #31
 80034ae:	d504      	bpl.n	80034ba <_vfiprintf_r+0x4e>
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	b01d      	add	sp, #116	@ 0x74
 80034b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ba:	89ab      	ldrh	r3, [r5, #12]
 80034bc:	0598      	lsls	r0, r3, #22
 80034be:	d4f7      	bmi.n	80034b0 <_vfiprintf_r+0x44>
 80034c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034c2:	f7ff ff5d 	bl	8003380 <__retarget_lock_release_recursive>
 80034c6:	e7f3      	b.n	80034b0 <_vfiprintf_r+0x44>
 80034c8:	2300      	movs	r3, #0
 80034ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80034cc:	2320      	movs	r3, #32
 80034ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d6:	2330      	movs	r3, #48	@ 0x30
 80034d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003688 <_vfiprintf_r+0x21c>
 80034dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034e0:	f04f 0901 	mov.w	r9, #1
 80034e4:	4623      	mov	r3, r4
 80034e6:	469a      	mov	sl, r3
 80034e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ec:	b10a      	cbz	r2, 80034f2 <_vfiprintf_r+0x86>
 80034ee:	2a25      	cmp	r2, #37	@ 0x25
 80034f0:	d1f9      	bne.n	80034e6 <_vfiprintf_r+0x7a>
 80034f2:	ebba 0b04 	subs.w	fp, sl, r4
 80034f6:	d00b      	beq.n	8003510 <_vfiprintf_r+0xa4>
 80034f8:	465b      	mov	r3, fp
 80034fa:	4622      	mov	r2, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	4630      	mov	r0, r6
 8003500:	f7ff ffa1 	bl	8003446 <__sfputs_r>
 8003504:	3001      	adds	r0, #1
 8003506:	f000 80a7 	beq.w	8003658 <_vfiprintf_r+0x1ec>
 800350a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800350c:	445a      	add	r2, fp
 800350e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003510:	f89a 3000 	ldrb.w	r3, [sl]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 809f 	beq.w	8003658 <_vfiprintf_r+0x1ec>
 800351a:	2300      	movs	r3, #0
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003524:	f10a 0a01 	add.w	sl, sl, #1
 8003528:	9304      	str	r3, [sp, #16]
 800352a:	9307      	str	r3, [sp, #28]
 800352c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003530:	931a      	str	r3, [sp, #104]	@ 0x68
 8003532:	4654      	mov	r4, sl
 8003534:	2205      	movs	r2, #5
 8003536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800353a:	4853      	ldr	r0, [pc, #332]	@ (8003688 <_vfiprintf_r+0x21c>)
 800353c:	f7fc fe70 	bl	8000220 <memchr>
 8003540:	9a04      	ldr	r2, [sp, #16]
 8003542:	b9d8      	cbnz	r0, 800357c <_vfiprintf_r+0x110>
 8003544:	06d1      	lsls	r1, r2, #27
 8003546:	bf44      	itt	mi
 8003548:	2320      	movmi	r3, #32
 800354a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800354e:	0713      	lsls	r3, r2, #28
 8003550:	bf44      	itt	mi
 8003552:	232b      	movmi	r3, #43	@ 0x2b
 8003554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003558:	f89a 3000 	ldrb.w	r3, [sl]
 800355c:	2b2a      	cmp	r3, #42	@ 0x2a
 800355e:	d015      	beq.n	800358c <_vfiprintf_r+0x120>
 8003560:	9a07      	ldr	r2, [sp, #28]
 8003562:	4654      	mov	r4, sl
 8003564:	2000      	movs	r0, #0
 8003566:	f04f 0c0a 	mov.w	ip, #10
 800356a:	4621      	mov	r1, r4
 800356c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003570:	3b30      	subs	r3, #48	@ 0x30
 8003572:	2b09      	cmp	r3, #9
 8003574:	d94b      	bls.n	800360e <_vfiprintf_r+0x1a2>
 8003576:	b1b0      	cbz	r0, 80035a6 <_vfiprintf_r+0x13a>
 8003578:	9207      	str	r2, [sp, #28]
 800357a:	e014      	b.n	80035a6 <_vfiprintf_r+0x13a>
 800357c:	eba0 0308 	sub.w	r3, r0, r8
 8003580:	fa09 f303 	lsl.w	r3, r9, r3
 8003584:	4313      	orrs	r3, r2
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	46a2      	mov	sl, r4
 800358a:	e7d2      	b.n	8003532 <_vfiprintf_r+0xc6>
 800358c:	9b03      	ldr	r3, [sp, #12]
 800358e:	1d19      	adds	r1, r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	9103      	str	r1, [sp, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bfbb      	ittet	lt
 8003598:	425b      	neglt	r3, r3
 800359a:	f042 0202 	orrlt.w	r2, r2, #2
 800359e:	9307      	strge	r3, [sp, #28]
 80035a0:	9307      	strlt	r3, [sp, #28]
 80035a2:	bfb8      	it	lt
 80035a4:	9204      	strlt	r2, [sp, #16]
 80035a6:	7823      	ldrb	r3, [r4, #0]
 80035a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80035aa:	d10a      	bne.n	80035c2 <_vfiprintf_r+0x156>
 80035ac:	7863      	ldrb	r3, [r4, #1]
 80035ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80035b0:	d132      	bne.n	8003618 <_vfiprintf_r+0x1ac>
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	9203      	str	r2, [sp, #12]
 80035ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035be:	3402      	adds	r4, #2
 80035c0:	9305      	str	r3, [sp, #20]
 80035c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003698 <_vfiprintf_r+0x22c>
 80035c6:	7821      	ldrb	r1, [r4, #0]
 80035c8:	2203      	movs	r2, #3
 80035ca:	4650      	mov	r0, sl
 80035cc:	f7fc fe28 	bl	8000220 <memchr>
 80035d0:	b138      	cbz	r0, 80035e2 <_vfiprintf_r+0x176>
 80035d2:	9b04      	ldr	r3, [sp, #16]
 80035d4:	eba0 000a 	sub.w	r0, r0, sl
 80035d8:	2240      	movs	r2, #64	@ 0x40
 80035da:	4082      	lsls	r2, r0
 80035dc:	4313      	orrs	r3, r2
 80035de:	3401      	adds	r4, #1
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e6:	4829      	ldr	r0, [pc, #164]	@ (800368c <_vfiprintf_r+0x220>)
 80035e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035ec:	2206      	movs	r2, #6
 80035ee:	f7fc fe17 	bl	8000220 <memchr>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d03f      	beq.n	8003676 <_vfiprintf_r+0x20a>
 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <_vfiprintf_r+0x224>)
 80035f8:	bb1b      	cbnz	r3, 8003642 <_vfiprintf_r+0x1d6>
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	3307      	adds	r3, #7
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	3308      	adds	r3, #8
 8003604:	9303      	str	r3, [sp, #12]
 8003606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003608:	443b      	add	r3, r7
 800360a:	9309      	str	r3, [sp, #36]	@ 0x24
 800360c:	e76a      	b.n	80034e4 <_vfiprintf_r+0x78>
 800360e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003612:	460c      	mov	r4, r1
 8003614:	2001      	movs	r0, #1
 8003616:	e7a8      	b.n	800356a <_vfiprintf_r+0xfe>
 8003618:	2300      	movs	r3, #0
 800361a:	3401      	adds	r4, #1
 800361c:	9305      	str	r3, [sp, #20]
 800361e:	4619      	mov	r1, r3
 8003620:	f04f 0c0a 	mov.w	ip, #10
 8003624:	4620      	mov	r0, r4
 8003626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800362a:	3a30      	subs	r2, #48	@ 0x30
 800362c:	2a09      	cmp	r2, #9
 800362e:	d903      	bls.n	8003638 <_vfiprintf_r+0x1cc>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0c6      	beq.n	80035c2 <_vfiprintf_r+0x156>
 8003634:	9105      	str	r1, [sp, #20]
 8003636:	e7c4      	b.n	80035c2 <_vfiprintf_r+0x156>
 8003638:	fb0c 2101 	mla	r1, ip, r1, r2
 800363c:	4604      	mov	r4, r0
 800363e:	2301      	movs	r3, #1
 8003640:	e7f0      	b.n	8003624 <_vfiprintf_r+0x1b8>
 8003642:	ab03      	add	r3, sp, #12
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462a      	mov	r2, r5
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <_vfiprintf_r+0x228>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	4630      	mov	r0, r6
 800364e:	f3af 8000 	nop.w
 8003652:	4607      	mov	r7, r0
 8003654:	1c78      	adds	r0, r7, #1
 8003656:	d1d6      	bne.n	8003606 <_vfiprintf_r+0x19a>
 8003658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800365a:	07d9      	lsls	r1, r3, #31
 800365c:	d405      	bmi.n	800366a <_vfiprintf_r+0x1fe>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	059a      	lsls	r2, r3, #22
 8003662:	d402      	bmi.n	800366a <_vfiprintf_r+0x1fe>
 8003664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003666:	f7ff fe8b 	bl	8003380 <__retarget_lock_release_recursive>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	065b      	lsls	r3, r3, #25
 800366e:	f53f af1f 	bmi.w	80034b0 <_vfiprintf_r+0x44>
 8003672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003674:	e71e      	b.n	80034b4 <_vfiprintf_r+0x48>
 8003676:	ab03      	add	r3, sp, #12
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	462a      	mov	r2, r5
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <_vfiprintf_r+0x228>)
 800367e:	a904      	add	r1, sp, #16
 8003680:	4630      	mov	r0, r6
 8003682:	f000 f879 	bl	8003778 <_printf_i>
 8003686:	e7e4      	b.n	8003652 <_vfiprintf_r+0x1e6>
 8003688:	08003e28 	.word	0x08003e28
 800368c:	08003e32 	.word	0x08003e32
 8003690:	00000000 	.word	0x00000000
 8003694:	08003447 	.word	0x08003447
 8003698:	08003e2e 	.word	0x08003e2e

0800369c <_printf_common>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	4616      	mov	r6, r2
 80036a2:	4698      	mov	r8, r3
 80036a4:	688a      	ldr	r2, [r1, #8]
 80036a6:	690b      	ldr	r3, [r1, #16]
 80036a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bfb8      	it	lt
 80036b0:	4613      	movlt	r3, r2
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036b8:	4607      	mov	r7, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	b10a      	cbz	r2, 80036c2 <_printf_common+0x26>
 80036be:	3301      	adds	r3, #1
 80036c0:	6033      	str	r3, [r6, #0]
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	0699      	lsls	r1, r3, #26
 80036c6:	bf42      	ittt	mi
 80036c8:	6833      	ldrmi	r3, [r6, #0]
 80036ca:	3302      	addmi	r3, #2
 80036cc:	6033      	strmi	r3, [r6, #0]
 80036ce:	6825      	ldr	r5, [r4, #0]
 80036d0:	f015 0506 	ands.w	r5, r5, #6
 80036d4:	d106      	bne.n	80036e4 <_printf_common+0x48>
 80036d6:	f104 0a19 	add.w	sl, r4, #25
 80036da:	68e3      	ldr	r3, [r4, #12]
 80036dc:	6832      	ldr	r2, [r6, #0]
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	42ab      	cmp	r3, r5
 80036e2:	dc26      	bgt.n	8003732 <_printf_common+0x96>
 80036e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	3b00      	subs	r3, #0
 80036ec:	bf18      	it	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	0692      	lsls	r2, r2, #26
 80036f2:	d42b      	bmi.n	800374c <_printf_common+0xb0>
 80036f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036f8:	4641      	mov	r1, r8
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c8      	blx	r9
 80036fe:	3001      	adds	r0, #1
 8003700:	d01e      	beq.n	8003740 <_printf_common+0xa4>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf02      	ittt	eq
 800370e:	68e5      	ldreq	r5, [r4, #12]
 8003710:	6833      	ldreq	r3, [r6, #0]
 8003712:	1aed      	subeq	r5, r5, r3
 8003714:	68a3      	ldr	r3, [r4, #8]
 8003716:	bf0c      	ite	eq
 8003718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800371c:	2500      	movne	r5, #0
 800371e:	4293      	cmp	r3, r2
 8003720:	bfc4      	itt	gt
 8003722:	1a9b      	subgt	r3, r3, r2
 8003724:	18ed      	addgt	r5, r5, r3
 8003726:	2600      	movs	r6, #0
 8003728:	341a      	adds	r4, #26
 800372a:	42b5      	cmp	r5, r6
 800372c:	d11a      	bne.n	8003764 <_printf_common+0xc8>
 800372e:	2000      	movs	r0, #0
 8003730:	e008      	b.n	8003744 <_printf_common+0xa8>
 8003732:	2301      	movs	r3, #1
 8003734:	4652      	mov	r2, sl
 8003736:	4641      	mov	r1, r8
 8003738:	4638      	mov	r0, r7
 800373a:	47c8      	blx	r9
 800373c:	3001      	adds	r0, #1
 800373e:	d103      	bne.n	8003748 <_printf_common+0xac>
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003748:	3501      	adds	r5, #1
 800374a:	e7c6      	b.n	80036da <_printf_common+0x3e>
 800374c:	18e1      	adds	r1, r4, r3
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	2030      	movs	r0, #48	@ 0x30
 8003752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003756:	4422      	add	r2, r4
 8003758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800375c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003760:	3302      	adds	r3, #2
 8003762:	e7c7      	b.n	80036f4 <_printf_common+0x58>
 8003764:	2301      	movs	r3, #1
 8003766:	4622      	mov	r2, r4
 8003768:	4641      	mov	r1, r8
 800376a:	4638      	mov	r0, r7
 800376c:	47c8      	blx	r9
 800376e:	3001      	adds	r0, #1
 8003770:	d0e6      	beq.n	8003740 <_printf_common+0xa4>
 8003772:	3601      	adds	r6, #1
 8003774:	e7d9      	b.n	800372a <_printf_common+0x8e>
	...

08003778 <_printf_i>:
 8003778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	7e0f      	ldrb	r7, [r1, #24]
 800377e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003780:	2f78      	cmp	r7, #120	@ 0x78
 8003782:	4691      	mov	r9, r2
 8003784:	4680      	mov	r8, r0
 8003786:	460c      	mov	r4, r1
 8003788:	469a      	mov	sl, r3
 800378a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800378e:	d807      	bhi.n	80037a0 <_printf_i+0x28>
 8003790:	2f62      	cmp	r7, #98	@ 0x62
 8003792:	d80a      	bhi.n	80037aa <_printf_i+0x32>
 8003794:	2f00      	cmp	r7, #0
 8003796:	f000 80d2 	beq.w	800393e <_printf_i+0x1c6>
 800379a:	2f58      	cmp	r7, #88	@ 0x58
 800379c:	f000 80b9 	beq.w	8003912 <_printf_i+0x19a>
 80037a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037a8:	e03a      	b.n	8003820 <_printf_i+0xa8>
 80037aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ae:	2b15      	cmp	r3, #21
 80037b0:	d8f6      	bhi.n	80037a0 <_printf_i+0x28>
 80037b2:	a101      	add	r1, pc, #4	@ (adr r1, 80037b8 <_printf_i+0x40>)
 80037b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b8:	08003811 	.word	0x08003811
 80037bc:	08003825 	.word	0x08003825
 80037c0:	080037a1 	.word	0x080037a1
 80037c4:	080037a1 	.word	0x080037a1
 80037c8:	080037a1 	.word	0x080037a1
 80037cc:	080037a1 	.word	0x080037a1
 80037d0:	08003825 	.word	0x08003825
 80037d4:	080037a1 	.word	0x080037a1
 80037d8:	080037a1 	.word	0x080037a1
 80037dc:	080037a1 	.word	0x080037a1
 80037e0:	080037a1 	.word	0x080037a1
 80037e4:	08003925 	.word	0x08003925
 80037e8:	0800384f 	.word	0x0800384f
 80037ec:	080038df 	.word	0x080038df
 80037f0:	080037a1 	.word	0x080037a1
 80037f4:	080037a1 	.word	0x080037a1
 80037f8:	08003947 	.word	0x08003947
 80037fc:	080037a1 	.word	0x080037a1
 8003800:	0800384f 	.word	0x0800384f
 8003804:	080037a1 	.word	0x080037a1
 8003808:	080037a1 	.word	0x080037a1
 800380c:	080038e7 	.word	0x080038e7
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	1d1a      	adds	r2, r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6032      	str	r2, [r6, #0]
 8003818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800381c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003820:	2301      	movs	r3, #1
 8003822:	e09d      	b.n	8003960 <_printf_i+0x1e8>
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	1d19      	adds	r1, r3, #4
 800382a:	6031      	str	r1, [r6, #0]
 800382c:	0606      	lsls	r6, r0, #24
 800382e:	d501      	bpl.n	8003834 <_printf_i+0xbc>
 8003830:	681d      	ldr	r5, [r3, #0]
 8003832:	e003      	b.n	800383c <_printf_i+0xc4>
 8003834:	0645      	lsls	r5, r0, #25
 8003836:	d5fb      	bpl.n	8003830 <_printf_i+0xb8>
 8003838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800383c:	2d00      	cmp	r5, #0
 800383e:	da03      	bge.n	8003848 <_printf_i+0xd0>
 8003840:	232d      	movs	r3, #45	@ 0x2d
 8003842:	426d      	negs	r5, r5
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003848:	4859      	ldr	r0, [pc, #356]	@ (80039b0 <_printf_i+0x238>)
 800384a:	230a      	movs	r3, #10
 800384c:	e011      	b.n	8003872 <_printf_i+0xfa>
 800384e:	6821      	ldr	r1, [r4, #0]
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	0608      	lsls	r0, r1, #24
 8003854:	f853 5b04 	ldr.w	r5, [r3], #4
 8003858:	d402      	bmi.n	8003860 <_printf_i+0xe8>
 800385a:	0649      	lsls	r1, r1, #25
 800385c:	bf48      	it	mi
 800385e:	b2ad      	uxthmi	r5, r5
 8003860:	2f6f      	cmp	r7, #111	@ 0x6f
 8003862:	4853      	ldr	r0, [pc, #332]	@ (80039b0 <_printf_i+0x238>)
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	bf14      	ite	ne
 8003868:	230a      	movne	r3, #10
 800386a:	2308      	moveq	r3, #8
 800386c:	2100      	movs	r1, #0
 800386e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003872:	6866      	ldr	r6, [r4, #4]
 8003874:	60a6      	str	r6, [r4, #8]
 8003876:	2e00      	cmp	r6, #0
 8003878:	bfa2      	ittt	ge
 800387a:	6821      	ldrge	r1, [r4, #0]
 800387c:	f021 0104 	bicge.w	r1, r1, #4
 8003880:	6021      	strge	r1, [r4, #0]
 8003882:	b90d      	cbnz	r5, 8003888 <_printf_i+0x110>
 8003884:	2e00      	cmp	r6, #0
 8003886:	d04b      	beq.n	8003920 <_printf_i+0x1a8>
 8003888:	4616      	mov	r6, r2
 800388a:	fbb5 f1f3 	udiv	r1, r5, r3
 800388e:	fb03 5711 	mls	r7, r3, r1, r5
 8003892:	5dc7      	ldrb	r7, [r0, r7]
 8003894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003898:	462f      	mov	r7, r5
 800389a:	42bb      	cmp	r3, r7
 800389c:	460d      	mov	r5, r1
 800389e:	d9f4      	bls.n	800388a <_printf_i+0x112>
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d10b      	bne.n	80038bc <_printf_i+0x144>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	07df      	lsls	r7, r3, #31
 80038a8:	d508      	bpl.n	80038bc <_printf_i+0x144>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	6861      	ldr	r1, [r4, #4]
 80038ae:	4299      	cmp	r1, r3
 80038b0:	bfde      	ittt	le
 80038b2:	2330      	movle	r3, #48	@ 0x30
 80038b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038bc:	1b92      	subs	r2, r2, r6
 80038be:	6122      	str	r2, [r4, #16]
 80038c0:	f8cd a000 	str.w	sl, [sp]
 80038c4:	464b      	mov	r3, r9
 80038c6:	aa03      	add	r2, sp, #12
 80038c8:	4621      	mov	r1, r4
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff fee6 	bl	800369c <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d14a      	bne.n	800396a <_printf_i+0x1f2>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	b004      	add	sp, #16
 80038da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	f043 0320 	orr.w	r3, r3, #32
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	4833      	ldr	r0, [pc, #204]	@ (80039b4 <_printf_i+0x23c>)
 80038e8:	2778      	movs	r7, #120	@ 0x78
 80038ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	6831      	ldr	r1, [r6, #0]
 80038f2:	061f      	lsls	r7, r3, #24
 80038f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80038f8:	d402      	bmi.n	8003900 <_printf_i+0x188>
 80038fa:	065f      	lsls	r7, r3, #25
 80038fc:	bf48      	it	mi
 80038fe:	b2ad      	uxthmi	r5, r5
 8003900:	6031      	str	r1, [r6, #0]
 8003902:	07d9      	lsls	r1, r3, #31
 8003904:	bf44      	itt	mi
 8003906:	f043 0320 	orrmi.w	r3, r3, #32
 800390a:	6023      	strmi	r3, [r4, #0]
 800390c:	b11d      	cbz	r5, 8003916 <_printf_i+0x19e>
 800390e:	2310      	movs	r3, #16
 8003910:	e7ac      	b.n	800386c <_printf_i+0xf4>
 8003912:	4827      	ldr	r0, [pc, #156]	@ (80039b0 <_printf_i+0x238>)
 8003914:	e7e9      	b.n	80038ea <_printf_i+0x172>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f023 0320 	bic.w	r3, r3, #32
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	e7f6      	b.n	800390e <_printf_i+0x196>
 8003920:	4616      	mov	r6, r2
 8003922:	e7bd      	b.n	80038a0 <_printf_i+0x128>
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	6961      	ldr	r1, [r4, #20]
 800392a:	1d18      	adds	r0, r3, #4
 800392c:	6030      	str	r0, [r6, #0]
 800392e:	062e      	lsls	r6, r5, #24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	d501      	bpl.n	8003938 <_printf_i+0x1c0>
 8003934:	6019      	str	r1, [r3, #0]
 8003936:	e002      	b.n	800393e <_printf_i+0x1c6>
 8003938:	0668      	lsls	r0, r5, #25
 800393a:	d5fb      	bpl.n	8003934 <_printf_i+0x1bc>
 800393c:	8019      	strh	r1, [r3, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	4616      	mov	r6, r2
 8003944:	e7bc      	b.n	80038c0 <_printf_i+0x148>
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	6032      	str	r2, [r6, #0]
 800394c:	681e      	ldr	r6, [r3, #0]
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	2100      	movs	r1, #0
 8003952:	4630      	mov	r0, r6
 8003954:	f7fc fc64 	bl	8000220 <memchr>
 8003958:	b108      	cbz	r0, 800395e <_printf_i+0x1e6>
 800395a:	1b80      	subs	r0, r0, r6
 800395c:	6060      	str	r0, [r4, #4]
 800395e:	6863      	ldr	r3, [r4, #4]
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	2300      	movs	r3, #0
 8003964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003968:	e7aa      	b.n	80038c0 <_printf_i+0x148>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	4632      	mov	r2, r6
 800396e:	4649      	mov	r1, r9
 8003970:	4640      	mov	r0, r8
 8003972:	47d0      	blx	sl
 8003974:	3001      	adds	r0, #1
 8003976:	d0ad      	beq.n	80038d4 <_printf_i+0x15c>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d413      	bmi.n	80039a6 <_printf_i+0x22e>
 800397e:	68e0      	ldr	r0, [r4, #12]
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	4298      	cmp	r0, r3
 8003984:	bfb8      	it	lt
 8003986:	4618      	movlt	r0, r3
 8003988:	e7a6      	b.n	80038d8 <_printf_i+0x160>
 800398a:	2301      	movs	r3, #1
 800398c:	4632      	mov	r2, r6
 800398e:	4649      	mov	r1, r9
 8003990:	4640      	mov	r0, r8
 8003992:	47d0      	blx	sl
 8003994:	3001      	adds	r0, #1
 8003996:	d09d      	beq.n	80038d4 <_printf_i+0x15c>
 8003998:	3501      	adds	r5, #1
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	9903      	ldr	r1, [sp, #12]
 800399e:	1a5b      	subs	r3, r3, r1
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dcf2      	bgt.n	800398a <_printf_i+0x212>
 80039a4:	e7eb      	b.n	800397e <_printf_i+0x206>
 80039a6:	2500      	movs	r5, #0
 80039a8:	f104 0619 	add.w	r6, r4, #25
 80039ac:	e7f5      	b.n	800399a <_printf_i+0x222>
 80039ae:	bf00      	nop
 80039b0:	08003e39 	.word	0x08003e39
 80039b4:	08003e4a 	.word	0x08003e4a

080039b8 <__sflush_r>:
 80039b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	0716      	lsls	r6, r2, #28
 80039c2:	4605      	mov	r5, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	d454      	bmi.n	8003a72 <__sflush_r+0xba>
 80039c8:	684b      	ldr	r3, [r1, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	dc02      	bgt.n	80039d4 <__sflush_r+0x1c>
 80039ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dd48      	ble.n	8003a66 <__sflush_r+0xae>
 80039d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	d045      	beq.n	8003a66 <__sflush_r+0xae>
 80039da:	2300      	movs	r3, #0
 80039dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039e0:	682f      	ldr	r7, [r5, #0]
 80039e2:	6a21      	ldr	r1, [r4, #32]
 80039e4:	602b      	str	r3, [r5, #0]
 80039e6:	d030      	beq.n	8003a4a <__sflush_r+0x92>
 80039e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	0759      	lsls	r1, r3, #29
 80039ee:	d505      	bpl.n	80039fc <__sflush_r+0x44>
 80039f0:	6863      	ldr	r3, [r4, #4]
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039f6:	b10b      	cbz	r3, 80039fc <__sflush_r+0x44>
 80039f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a00:	6a21      	ldr	r1, [r4, #32]
 8003a02:	4628      	mov	r0, r5
 8003a04:	47b0      	blx	r6
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	d106      	bne.n	8003a1a <__sflush_r+0x62>
 8003a0c:	6829      	ldr	r1, [r5, #0]
 8003a0e:	291d      	cmp	r1, #29
 8003a10:	d82b      	bhi.n	8003a6a <__sflush_r+0xb2>
 8003a12:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <__sflush_r+0x104>)
 8003a14:	410a      	asrs	r2, r1
 8003a16:	07d6      	lsls	r6, r2, #31
 8003a18:	d427      	bmi.n	8003a6a <__sflush_r+0xb2>
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	6062      	str	r2, [r4, #4]
 8003a1e:	04d9      	lsls	r1, r3, #19
 8003a20:	6922      	ldr	r2, [r4, #16]
 8003a22:	6022      	str	r2, [r4, #0]
 8003a24:	d504      	bpl.n	8003a30 <__sflush_r+0x78>
 8003a26:	1c42      	adds	r2, r0, #1
 8003a28:	d101      	bne.n	8003a2e <__sflush_r+0x76>
 8003a2a:	682b      	ldr	r3, [r5, #0]
 8003a2c:	b903      	cbnz	r3, 8003a30 <__sflush_r+0x78>
 8003a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a32:	602f      	str	r7, [r5, #0]
 8003a34:	b1b9      	cbz	r1, 8003a66 <__sflush_r+0xae>
 8003a36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	d002      	beq.n	8003a44 <__sflush_r+0x8c>
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff fca0 	bl	8003384 <_free_r>
 8003a44:	2300      	movs	r3, #0
 8003a46:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a48:	e00d      	b.n	8003a66 <__sflush_r+0xae>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b0      	blx	r6
 8003a50:	4602      	mov	r2, r0
 8003a52:	1c50      	adds	r0, r2, #1
 8003a54:	d1c9      	bne.n	80039ea <__sflush_r+0x32>
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0c6      	beq.n	80039ea <__sflush_r+0x32>
 8003a5c:	2b1d      	cmp	r3, #29
 8003a5e:	d001      	beq.n	8003a64 <__sflush_r+0xac>
 8003a60:	2b16      	cmp	r3, #22
 8003a62:	d11e      	bne.n	8003aa2 <__sflush_r+0xea>
 8003a64:	602f      	str	r7, [r5, #0]
 8003a66:	2000      	movs	r0, #0
 8003a68:	e022      	b.n	8003ab0 <__sflush_r+0xf8>
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	e01b      	b.n	8003aaa <__sflush_r+0xf2>
 8003a72:	690f      	ldr	r7, [r1, #16]
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	d0f6      	beq.n	8003a66 <__sflush_r+0xae>
 8003a78:	0793      	lsls	r3, r2, #30
 8003a7a:	680e      	ldr	r6, [r1, #0]
 8003a7c:	bf08      	it	eq
 8003a7e:	694b      	ldreq	r3, [r1, #20]
 8003a80:	600f      	str	r7, [r1, #0]
 8003a82:	bf18      	it	ne
 8003a84:	2300      	movne	r3, #0
 8003a86:	eba6 0807 	sub.w	r8, r6, r7
 8003a8a:	608b      	str	r3, [r1, #8]
 8003a8c:	f1b8 0f00 	cmp.w	r8, #0
 8003a90:	dde9      	ble.n	8003a66 <__sflush_r+0xae>
 8003a92:	6a21      	ldr	r1, [r4, #32]
 8003a94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a96:	4643      	mov	r3, r8
 8003a98:	463a      	mov	r2, r7
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b0      	blx	r6
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	dc08      	bgt.n	8003ab4 <__sflush_r+0xfc>
 8003aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aaa:	81a3      	strh	r3, [r4, #12]
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	4407      	add	r7, r0
 8003ab6:	eba8 0800 	sub.w	r8, r8, r0
 8003aba:	e7e7      	b.n	8003a8c <__sflush_r+0xd4>
 8003abc:	dfbffffe 	.word	0xdfbffffe

08003ac0 <_fflush_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	b913      	cbnz	r3, 8003ad0 <_fflush_r+0x10>
 8003aca:	2500      	movs	r5, #0
 8003acc:	4628      	mov	r0, r5
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	b118      	cbz	r0, 8003ada <_fflush_r+0x1a>
 8003ad2:	6a03      	ldr	r3, [r0, #32]
 8003ad4:	b90b      	cbnz	r3, 8003ada <_fflush_r+0x1a>
 8003ad6:	f7ff fa4b 	bl	8002f70 <__sinit>
 8003ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f3      	beq.n	8003aca <_fflush_r+0xa>
 8003ae2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d404      	bmi.n	8003af2 <_fflush_r+0x32>
 8003ae8:	0599      	lsls	r1, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_fflush_r+0x32>
 8003aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aee:	f7ff fc46 	bl	800337e <__retarget_lock_acquire_recursive>
 8003af2:	4628      	mov	r0, r5
 8003af4:	4621      	mov	r1, r4
 8003af6:	f7ff ff5f 	bl	80039b8 <__sflush_r>
 8003afa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003afc:	07da      	lsls	r2, r3, #31
 8003afe:	4605      	mov	r5, r0
 8003b00:	d4e4      	bmi.n	8003acc <_fflush_r+0xc>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	059b      	lsls	r3, r3, #22
 8003b06:	d4e1      	bmi.n	8003acc <_fflush_r+0xc>
 8003b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b0a:	f7ff fc39 	bl	8003380 <__retarget_lock_release_recursive>
 8003b0e:	e7dd      	b.n	8003acc <_fflush_r+0xc>

08003b10 <__swhatbuf_r>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	460c      	mov	r4, r1
 8003b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	b096      	sub	sp, #88	@ 0x58
 8003b1c:	4615      	mov	r5, r2
 8003b1e:	461e      	mov	r6, r3
 8003b20:	da0d      	bge.n	8003b3e <__swhatbuf_r+0x2e>
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2340      	movne	r3, #64	@ 0x40
 8003b30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b34:	2000      	movs	r0, #0
 8003b36:	6031      	str	r1, [r6, #0]
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	b016      	add	sp, #88	@ 0x58
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	466a      	mov	r2, sp
 8003b40:	f000 f848 	bl	8003bd4 <_fstat_r>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	dbec      	blt.n	8003b22 <__swhatbuf_r+0x12>
 8003b48:	9901      	ldr	r1, [sp, #4]
 8003b4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b52:	4259      	negs	r1, r3
 8003b54:	4159      	adcs	r1, r3
 8003b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b5a:	e7eb      	b.n	8003b34 <__swhatbuf_r+0x24>

08003b5c <__smakebuf_r>:
 8003b5c:	898b      	ldrh	r3, [r1, #12]
 8003b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b60:	079d      	lsls	r5, r3, #30
 8003b62:	4606      	mov	r6, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	d507      	bpl.n	8003b78 <__smakebuf_r+0x1c>
 8003b68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	2301      	movs	r3, #1
 8003b72:	6163      	str	r3, [r4, #20]
 8003b74:	b003      	add	sp, #12
 8003b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b78:	ab01      	add	r3, sp, #4
 8003b7a:	466a      	mov	r2, sp
 8003b7c:	f7ff ffc8 	bl	8003b10 <__swhatbuf_r>
 8003b80:	9f00      	ldr	r7, [sp, #0]
 8003b82:	4605      	mov	r5, r0
 8003b84:	4639      	mov	r1, r7
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff f8da 	bl	8002d40 <_malloc_r>
 8003b8c:	b948      	cbnz	r0, 8003ba2 <__smakebuf_r+0x46>
 8003b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b92:	059a      	lsls	r2, r3, #22
 8003b94:	d4ee      	bmi.n	8003b74 <__smakebuf_r+0x18>
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	e7e2      	b.n	8003b68 <__smakebuf_r+0xc>
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	6020      	str	r0, [r4, #0]
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003baa:	81a3      	strh	r3, [r4, #12]
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bb2:	b15b      	cbz	r3, 8003bcc <__smakebuf_r+0x70>
 8003bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f81d 	bl	8003bf8 <_isatty_r>
 8003bbe:	b128      	cbz	r0, 8003bcc <__smakebuf_r+0x70>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	431d      	orrs	r5, r3
 8003bd0:	81a5      	strh	r5, [r4, #12]
 8003bd2:	e7cf      	b.n	8003b74 <__smakebuf_r+0x18>

08003bd4 <_fstat_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d07      	ldr	r5, [pc, #28]	@ (8003bf4 <_fstat_r+0x20>)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	f7fd fb84 	bl	80012ee <_fstat>
 8003be6:	1c43      	adds	r3, r0, #1
 8003be8:	d102      	bne.n	8003bf0 <_fstat_r+0x1c>
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	b103      	cbz	r3, 8003bf0 <_fstat_r+0x1c>
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	bd38      	pop	{r3, r4, r5, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000c5c 	.word	0x20000c5c

08003bf8 <_isatty_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d06      	ldr	r5, [pc, #24]	@ (8003c14 <_isatty_r+0x1c>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fd fb83 	bl	800130e <_isatty>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_isatty_r+0x1a>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_isatty_r+0x1a>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	20000c5c 	.word	0x20000c5c

08003c18 <_init>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr

08003c24 <_fini>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr
